package server_grpc

import (
	"context"
	"time"
	"github.com/ManyakRus/starter/micro"
	"github.com/ManyakRus/starter/contextmain"
	"github.com/ManyakRus/starter/postgres_gorm"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/api/grpc_proto"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/db_constants"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/object_model/entities/lawsuit_status_types"
)

// LawsuitStatusType_ReadFromCache - читает и возвращает модель из кеша или БД
func (s *ServerGRPC) LawsuitStatusType_ReadFromCache(ctx context.Context, Request *grpc_proto.RequestId) (*grpc_proto.Response, error) {
	var Otvet grpc_proto.Response
	var err error

	//проверим контекст уже отменён
	if micro.ContextDone(ctx) == true {
		err = context.Canceled
		return &Otvet, err
	}

	//проверим совпадения версии модели
	VersionServer := lawsuit_status_types.LawsuitStatusType{}.GetStructVersion()
	VersionClient := Request.VersionModel
	if VersionServer != VersionClient {
		err = ErrorModelVersion(lawsuit_status_types.LawsuitStatusType{})
		return &Otvet, err
	}

	ctxMain := contextmain.GetContext()
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	//запрос в БД
	db := postgres_gorm.GetConnection()
	ID := Request.ID
	Model := lawsuit_status_types.LawsuitStatusType{}
	Model, err = crud_lawsuit_status_types.ReadFromCache_ctx(ctx, db, ID)
	if err != nil {
		return &Otvet, err
	}

	//заполяем ответ
	ModelString, err := Model.GetJSON()
	if err != nil {
		return &Otvet, err
	}
	Otvet.ModelString = ModelString

	return &Otvet, err
}
