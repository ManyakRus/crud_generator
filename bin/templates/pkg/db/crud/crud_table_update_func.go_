// Read - изменяет 1 поле ColumnNameField в базе данных
func (crud Crud_DB) Read(m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	//ctxMain := contextmain.GetContext()
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_gorm.GetConnection()

	err = Read_ctx(ctx, db, m)
	return err
}

// Read_ctx - изменяет 1 поле ColumnNameField в базе данных
// с учётом контекста и соединения к БД
func Read_ctx(ctx context.Context, db *gorm.DB, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if micro.ContextDone(ctx) == true {
		err = context.Canceled
		return err
	}

	//ID не должен быть =0
	if IntFromAlias(m.ID) == 0 {
		err = errors.New(m.TableNameDB()+` Read() error: ColumnNamePK=0`)
		return err
	}

	//
	//tx := db.WithContext(ctx)
	tx := db

	//
	Value := m.ColumnNameField
	if Value == 0 {
		tx = db.Model(&m).Update("ColumnNameField", gorm.Expr("NULL"))
	} else {
		tx = db.Model(&m).Update("ColumnNameField", Value)
	}
	err = tx.Error
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Read() id: %v, error: %w", m.ColumnNamePK, err)
		return err
	}

	//удалим из кэша
	//cache.Remove(IntFromAlias(m.ID))

	return err
}
