// FindMassBy_FieldNamesWithUnderline - находит запись в БД по FieldNamesWithPlus
func (crud Crud_DB) FindMassBy_FieldNamesWithUnderline(m *lawsuit_status_types.LawsuitStatusType) ([]lawsuit_status_types.LawsuitStatusType, error) {
	Otvet := make([]lawsuit_status_types.LawsuitStatusType, 0)
	var err error

	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	//ctxMain := contextmain.GetContext()
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	Otvet, err = FindMassBy_FieldNamesWithUnderline_ctx(ctx, db, m)

	return Otvet, err
}

// FindMassBy_FieldNamesWithUnderline_ctx - находит запись в БД по FieldNamesWithPlus
func FindMassBy_FieldNamesWithUnderline_ctx(ctx context.Context, db *pgxpool.Pool, m *lawsuit_status_types.LawsuitStatusType) ([]lawsuit_status_types.LawsuitStatusType, error) {
	var err error
	Otvet := make([]lawsuit_status_types.LawsuitStatusType, 0)

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	//tx := db.WithContext(ctx)
	tx := db

	tx = tx.Where(`"ColumnName" = ?`, m.FieldName)
	tx = tx.Order(`ColumnNamesWithCommaQuotes`)
	tx = tx.Find(&Otvet)
	err = tx.Error

	return Otvet, err
}

