// FindModelBy_FieldName - находит запись в БД из связанной таблицы по FieldNamesWithPlus
func (crud Crud_DB) FindModelBy_FieldName(m *lawsuit_status_types.LawsuitStatusType) (foreign_package.ForeignModel, error) {
	var err error

	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	//ctxMain := contextmain.GetContext()
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	Otvet, err := FindModelBy_FieldName_ctx(ctx, db, m)

	return Otvet, err
}

// FindModelBy_FieldName_ctx - находит запись в БД из связанной таблицы по FieldNamesWithPlus
func FindModelBy_FieldName_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction, m *lawsuit_status_types.LawsuitStatusType) (foreign_package.ForeignModel, error) {
	Otvet := foreign_package.ForeignModel{}
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return Otvet, err
	}

	//
	TextSQL := crud_foreign_package.TextSQL_Read
	TextSQL = TextSQL + `
	WHERE 1=1
	ReplaceWhereID
`

	//
	row := db.QueryRow(ctx, TextSQL, m.FieldName)
	err = row.Scan(ReplaceAllFieldsWithComma)
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" FindModelBy_FieldName() FieldName: %v, error: %w", m.FieldName, err)
		return Otvet, err
	}

	return Otvet, err
}

