package crud_lawsuit_status_types

import (
	"context"
	"fmt"
	"github.com/ManyakRus/starter/postgres_pgx"
	"github.com/ManyakRus/starter/postgres_pgxpool"
	"github.com/ManyakRus/starter/stopapp"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/db_constants"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/object_model/entities/lawsuit_status_types"
	"sync/atomic"
	"time"
)

// TextSQL_Create - текст SQL запроса для добавления записи, с заполненным ID
ReplaceTextSQLCreateWithID

// TextSQL_Create_WithoutID - текст SQL запроса для добавления записи, без колонок ID
ReplaceTextSQLCreateWithoutID

// Create - записывает новый объект в базу данных
func (crud Crud_DB) Create(m *lawsuit_status_types.LawsuitStatusType) error {
	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	err := Create_ctx(ctx, db, m)
	return err
}

// Create_ctx - записывает новый объект в базу данных
func Create_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return err
	}

	//
	TextSQL := TextSQL_Create_WithoutID + `
RETURNING ReplaceColumnNamesPK;
`

	//массив, в котором значения всех полей и ИД
	MassValues := make([]interface{}, 0)
	ReplaceMassValuesAppend

	//если ИД не пустой, то добавим его в запрос
	if ReplacePKNotEqual0 {
		TextSQL = TextSQL_Create
		ReplaceMassValuesIDAppend
	}


	//
	err = db.QueryRow(ctx, TextSQL, MassValues...).Scan(ReplacePKFieldsWithAmpersandComma)
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Create_ctx() ReplacePKFieldNamesFormat error: %w", ReplacePKFieldsWithComma, err)
		return err
	}

	return err
}

