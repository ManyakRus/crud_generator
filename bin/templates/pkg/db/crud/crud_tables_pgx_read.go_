package crud_lawsuit_status_types

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/ManyakRus/starter/postgres_pgx"
	"github.com/ManyakRus/starter/postgres_pgxpool"
	"github.com/ManyakRus/starter/stopapp"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/constants"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/db_constants"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/object_model/entities/lawsuit_status_types"
	"sync/atomic"
	"time"
)

// TextSQL_Columns - текст SQL запроса, только колонки
const TextSQL_Columns = `ReplaceTextSQLColumns`

// TextSQL_Read - текст SQL запроса для чтения записи
const TextSQL_Read = `ReplaceTextSQLRead`

// Read - находит запись в БД по ID
func (crud Crud_DB) Read(m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection_NoNull(constants.SERVICE_NAME)

	err = Read_ctx(ctx, db, m)
	return err
}

// Read_ctx - находит запись в БД по ID
func Read_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return err
	}

	//
	TextSQL := TextSQL_Read + `
WHERE 1=1
ReplaceWhereID
`

	//
	row := db.QueryRow(ctx, TextSQL, ReplacePKFieldsWithComma)
	err = Scan(row, m)

	return err
}

// Scan - сканирование результата запроса в структуру
func Scan(row pgx.Row, m *lawsuit_status_types.LawsuitStatusType) error {
	err := row.Scan(ReplaceAllFieldsWithComma)

	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Scan() ReplacePKFieldNamesFormat warning: %w", ReplacePKFieldsWithComma, err)
		return err
	}

	return err
}

// ScanRow - сканирование результата запроса в структуру
func ScanRow(row pgx.Row) (lawsuit_status_types.LawsuitStatusType, error) {
	m := lawsuit_status_types.LawsuitStatusType{}
	err := Scan(row, &m)
	return m, err
}

// ScanRows - сканирование много строк запроса в массив структур
func ScanRows(rows pgx.Rows) ([]lawsuit_status_types.LawsuitStatusType, error) {
	Otvet := make([]lawsuit_status_types.LawsuitStatusType, 0)
	var err error

	m := lawsuit_status_types.LawsuitStatusType{}

	for rows.Next() {
		err := Scan(rows, &m)

		if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Scan() ReplacePKFieldNamesFormat warning: %w", ReplacePKFieldsWithComma, err)
			return Otvet, err
		}

		Otvet = append(Otvet, m)
	}

	return Otvet, err
}
