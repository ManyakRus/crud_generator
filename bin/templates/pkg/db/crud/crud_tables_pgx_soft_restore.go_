package crud_lawsuit_status_types

import (
	"context"
	"errors"
	"fmt"
	"github.com/ManyakRus/starter/postgres_pgx"
	"github.com/ManyakRus/starter/postgres_pgxpool"
	"github.com/ManyakRus/starter/stopapp"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/db_constants"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/object_model/entities/lawsuit_status_types"
	"sync/atomic"
	"time"
)

// TextSQL_Delete- текст SQL запроса для удаления записи
const TextSQL_Restore = `
UPDATE ReplaceTableName SET
is_deleted = false
ReplaceDeletedAtEqual
`


// Restore - удаляет объект в базе данных
func (crud Crud_DB) Restore(m *lawsuit_status_types.LawsuitStatusType) error {
	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	err := Restore_ctx(ctx, db, m)
	return err
}

// Restore_ctx - удаляет объект в базу данных
func Restore_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return err
	}

	//проверка ID
	if ReplaceID0 {
		TextError := fmt.Sprint(m.TableNameDB()+" Restore() ", TableName, " error: ReplacePKFieldsWithComma is empty")
		err = errors.New(TextError)
		return err
	}

	//
	TextSQL := TextSQL_Restore + `
WHERE 1=1
ReplaceWhereID
`
	//
	_, err = db.Exec(ctx, TextSQL, ReplacePKFieldsWithComma)
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Restore() ReplacePKFieldNamesFormat error: %w", ReplacePKFieldsWithComma, err)
		return err
	}

	m.IsDeleted = false
	ReplaceFieldDeletedAt

	return err
}

