package crud_lawsuit_status_types

import (
	"context"
	"errors"
	"fmt"
	"github.com/ManyakRus/starter/micro"
	"github.com/ManyakRus/starter/postgres_pgx"
	"github.com/ManyakRus/starter/postgres_pgxpool"
	"github.com/ManyakRus/starter/stopapp"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/db_constants"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/object_model/entities/lawsuit_status_types"
	"strconv"
	"sync/atomic"
	"time"
)

// TextSQL_Create - текст SQL запроса для добавления записи
const TextSQL_Update = `
UPDATE ReplaceTableName SET
ReplaceColumnNameEqualDollarComma
`


// Update - обновляет объект в базе данных
func (crud Crud_DB) Update(m *lawsuit_status_types.LawsuitStatusType) error {
	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	err := Update_ctx(ctx, db, m)
	return err
}

// Update_ctx - записывает новый объект в базу данных
func Update_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return err
	}

	//проверка ID
	if ReplaceID0 {
		TextError := fmt.Sprint(m.TableNameDB()+" Update() ", TableName, " error: ReplacePKFieldsWithComma is empty")
		err = errors.New(TextError)
		return err
	}

	//
	TextSQL := TextSQL_Update + `
WHERE 1=1
ReplaceWhereID
`
	//
	CommandTag, err := db.Exec(ctx, TextSQL, 
		ReplaceAllFieldsWithComma)
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Update_ctx() ReplacePKFieldNamesFormat error: %w", ReplacePKFieldsWithComma, err)
		return err
	}
	RowsAffected := CommandTag.RowsAffected()
	if RowsAffected == 0 {
		err = fmt.Errorf(m.TableNameDB()+" Update_ctx() error: ReplacePKFieldNamesFormat, RowsAffected: %v", ReplacePKFieldsWithComma, RowsAffected)
		return err
	}

ReplaceCacheRemove

	return err
}

// Update_MassNeedUpdate_ctx - записывает новый объект в базу данных
func Update_MassNeedUpdate_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction, m *lawsuit_status_types.LawsuitStatusType, MassNeedUpdateFields []string) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return err
	}

	//проверка ID
	if ReplaceID0 {
		TextError := fmt.Sprint(m.TableNameDB()+" Update() ", TableName, " error: ReplacePKFieldsWithComma is empty")
		err = errors.New(TextError)
		return err
	}

	MassFields := make([]any, 0)
ReplaceMassFieldsAppend
	Comma := ""
	TextSQL := `UPDATE "lawsuit_status_types" SET `
	for i, ColumnName1 := range MassNeedUpdateFields {
		ColumnNameDB, err := micro.Find_Tag_JSON(m, ColumnName1)
		if err != nil {
			return err
		}

		TextSQL = TextSQL + Comma + ColumnNameDB + " = $" + strconv.Itoa(ReplacePKCount+i+1)
		Value, err := micro.GetStructValue(m, ColumnName1)
		if err != nil {
			return err
		}

		MassFields = append(MassFields, Value)

		Comma = ",\n"
	}
	TextSQL = TextSQL + "\n" + `WHERE 1=1 ReplaceTextSQLWhere`

	//
	CommandTag, err := db.Exec(ctx, TextSQL, MassFields...)
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Update_MassNeedUpdate_ctx() ReplacePKFieldNamesFormat error: %w", ReplacePKFieldsWithComma, err)
		return err
	}
	RowsAffected := CommandTag.RowsAffected()
	if RowsAffected == 0 {
		err = fmt.Errorf(m.TableNameDB()+" Update_MassNeedUpdate_ctx() error: ReplacePKFieldNamesFormat, RowsAffected: %v", ReplacePKFieldsWithComma, RowsAffected)
		return err
	}

ReplaceCacheRemove

	return err
}

// Save - записывает новый или существующий объект в базу данных
func (crud Crud_DB) Save(m *lawsuit_status_types.LawsuitStatusType) error {
	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	//ctxMain := contextmain.GetContext()
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	err := Save_ctx(ctx, db, m)
	return err
}

// Save_ctx - записывает новый или существующий объект в базу данных
func Save_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return err
	}

	//
	if ReplaceID0 {
		err = Create_ctx(ctx, db, m)
	} else {
		err = Update_ctx(ctx, db, m)
	}

	return err
}

