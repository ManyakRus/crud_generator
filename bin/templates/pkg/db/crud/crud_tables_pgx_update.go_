package crud_lawsuit_status_types

import (
	"context"
	"errors"
	"fmt"
	"github.com/ManyakRus/starter/postgres_pgxpool"
	"github.com/ManyakRus/starter/stopapp"
	"github.com/jackc/pgx/v5/pgxpool"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/db_constants"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/object_model/entities/lawsuit_status_types"
	"sync/atomic"
	"time"
)

// TextSQL_Create - текст SQL запроса для добавления записи
const TextSQL_Update = `
UPDATE ReplaceTableName SET
ReplaceColumnNameEqualDollarComma
`


// Update - обновляет объект в базе данных
func (crud Crud_DB) Update(m *lawsuit_status_types.LawsuitStatusType) error {
	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	err := Update_ctx(ctx, db, m)
	return err
}

// Update_ctx - записывает новый объект в базу данных
func Update_ctx(ctx context.Context, db *pgxpool.Pool, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return err
	}

	//проверка ID
	if ReplaceID0 {
		TextError := fmt.Sprint(m.TableNameDB()+" Update() ", TableName, " error: ReplacePKFieldsWithComma is empty")
		err = errors.New(TextError)
		return err
	}

	//
	TextSQL := TextSQL_Update + `
WHERE 1=1
ReplaceWhereID
`
	//
	_, err = db.Exec(ctx, TextSQL, 
		ReplaceAllFieldsWithComma)
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Update() ReplacePKFieldNamesFormat error: %w", ReplacePKFieldsWithComma, err)
		return err
	}


	return err
}

