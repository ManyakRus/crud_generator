// Update_ReplaceFieldName - изменяет 1 поле ReplaceFieldName в базе данных
func (crud Crud_DB) Update_ReplaceFieldName(m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	//ctxMain := contextmain.GetContext()
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	err = Update_ReplaceFieldName_ctx(ctx, db, m)
	return err
}

// Update_ReplaceFieldName_ctx - изменяет 1 поле ReplaceFieldName в базе данных
// с учётом контекста и соединения к БД
func Update_ReplaceFieldName_ctx(ctx context.Context, db *pgxpool.Pool, m *lawsuit_status_types.LawsuitStatusType) error {
	var err error

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if micro.ContextDone(ctx) == true {
		err = context.Canceled
		return err
	}

	//ID не должен быть =0
	if ReplaceID0 {
		err = errors.New(m.TableNameDB()+` Read() error: empty ReplacePKFieldsWithComma`)
		return err
	}

	//
	TextSQL := `
	UPDATE ReplaceTableName SET
	ReplaceColumnNameEqualDollarComma
	ReplaceWhereID
	`

	TextSQL = strings.ReplaceAll(TextSQL, "ReplaceColumnNameEqualDollarComma", "")

	//
	ReplaceValueEqual
	_, err = db.Exec(ctx, TextSQL, Value, ReplacePKFieldsWithComma)
	if err != nil {
		err = fmt.Errorf(m.TableNameDB()+" Update_ReplaceFieldName() ReplacePKFieldNamesFormat, error: %w", ReplacePKFieldsWithComma, err)
		return err
	}

ReplaceCacheRemove

	return err
}
