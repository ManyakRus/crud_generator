// ReadAll - возвращает все записи в БД, кроме is_deleted=true
func (crud Crud_DB) ReadAll() ([]lawsuit_status_types.LawsuitStatusType, error) {
	Otvet := make([]lawsuit_status_types.LawsuitStatusType, 0)
	var err error

	ctxMain := context.Background() //операцию надо выполнить, даже при отмене контекста
	//ctxMain := contextmain.GetContext()
	ctx, ctxCancelFunc := context.WithTimeout(ctxMain, time.Second*time.Duration(db_constants.TIMEOUT_DB_SECONDS))
	defer ctxCancelFunc()

	db := postgres_pgxpool.GetConnection()

	Otvet, err = ReadAll_ctx(ctx, db)

	return Otvet, err
}

// ReadAll_ctx - возвращает все записи в БД, кроме is_deleted=true
func ReadAll_ctx(ctx context.Context, db postgres_pgx.IConnectionTransaction) ([]lawsuit_status_types.LawsuitStatusType, error) {
	var err error
	Otvet := make([]lawsuit_status_types.LawsuitStatusType, 0)

	//количество невыполненных операций +1 -1
	atomic.AddInt32(&stopapp.TotalMessagesSendingNow, 1)
	defer atomic.AddInt32(&stopapp.TotalMessagesSendingNow, -1)

	//
	if ctx.Err() != nil {
		err = ctx.Err()
		return Otvet, err
	}

	//
	TextSQL := TextSQL_Read + `
WHERE 1=1
ReplaceWhere
`

	//
	rows, err := db.Query(ctx, TextSQL)
	if err != nil {
		err = fmt.Errorf("db.Query() error: %w", err)
		return Otvet, err
	}
	if rows == nil {
		err = fmt.Errorf("db.Query() error: rows =nil")
		return Otvet, err
	}
	defer rows.Close()

	//результат в массив
	for rows.Next() {
		m := lawsuit_status_types.LawsuitStatusType{}
		err := rows.Scan(ReplaceAllFieldsWithComma)
		if err != nil {
			Values, _ := rows.Values()
			err = fmt.Errorf("rows.Scan() values: %v, error: %w", Values, err)
			return Otvet, err
		}
		Otvet = append(Otvet, m)
	}

	return Otvet, err
}
