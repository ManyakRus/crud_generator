package object_lawsuit_status_types

import (
	"encoding/json"
	"github.com/vmihailenco/msgpack/v5"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/calc_struct_version"
	"gitlab.aescorp.ru/dsp_dev/claim/sync_service/pkg/db/db_constants"
	"reflect"
)

// versionObjectLawsuitStatusType - версия структуры модели, с учётом имен и типов полей
var versionObjectLawsuitStatusType uint32

// Crud_ObjectLawsuitStatusType - объект контроллер crud операций
var Crud_ObjectLawsuitStatusType ICrud_ObjectLawsuitStatusType

// интерфейс стандартных CRUD операций, для использования в DB или GRPC или NRPC
type ICrud_ObjectLawsuitStatusType interface {
	ICrud_ObjectLawsuitStatusType_manual
	ReadObject(*ObjectLawsuitStatusType) error
}

// GetStructVersion - возвращает версию модели
func (m ObjectLawsuitStatusType) GetStructVersion() uint32 {
	if versionObjectLawsuitStatusType == 0 {
		versionObjectLawsuitStatusType = calc_struct_version.CalcStructVersion(reflect.TypeOf(m))
	}

	return versionObjectLawsuitStatusType
}

// GetModelFromJSON - создаёт модель из строки json
func (m *ObjectLawsuitStatusType) GetModelFromJSON(sModel string) error {
	var err error

	var bytes []byte
	bytes = []byte(sModel)

	err = json.Unmarshal(bytes, m)

	return err
}

// GetJSON - возвращает строку json из модели
func (m ObjectLawsuitStatusType) GetJSON() (string, error) {
	var Result string
	var err error

	bytes, err := json.Marshal(m)
	if err != nil {
		return Result, err
	}
	Result = string(bytes)
	return Result, err
}

// NewObjectLawsuitStatusType - возвращает новый объект
func NewObjectLawsuitStatusType() ObjectLawsuitStatusType {
	return ObjectLawsuitStatusType{}
}

// AsObjectLawsuitStatusType - создаёт объект из упакованного объекта в массиве байтов
func AsObjectLawsuitStatusType(b []byte) (ObjectLawsuitStatusType, error) {
	c := NewObjectLawsuitStatusType()
	err := msgpack.Unmarshal(b, &c)
	if err != nil {
		return NewObjectLawsuitStatusType(), err
	}
	return c, nil
}

// ObjectLawsuitStatusTypeAsBytes - упаковывает объект в массив байтов
func ObjectLawsuitStatusTypeAsBytes(m *ObjectLawsuitStatusType) ([]byte, error) {
	b, err := msgpack.Marshal(m)
	if err != nil {
		return nil, err
	}
	return b, nil
}


// ---------------------------- CRUD операции ------------------------------------------------------------

// ReadObject - находит запись в БД по ID, и заполняет в объект, а также заполняет все поля у которых есть foreign key
func (m *ObjectLawsuitStatusType) ReadObject() error {
	if Crud_ObjectLawsuitStatusType == nil {
		return db_constants.ErrorCrudIsNotInit
	}

	err := Crud_ObjectLawsuitStatusType.ReadObject(m)

	return err
}
