// This code was autogenerated from sync_service.proto, do not edit.
package grpc_proto

import (
	"context"
	"log"
	"time"

	"github.com/nats-io/nats.go"
	"github.com/nats-rpc/nrpc"
	"google.golang.org/protobuf/proto"
)

// Sync_serviceServer is the interface that providers of the service
// Sync_service should implement.
type Sync_serviceServer interface {
	AccountingArea_Read(ctx context.Context, req *RequestId) (*Response, error)
	AccountingArea_Create(ctx context.Context, req *RequestModel) (*Response, error)
	AccountingArea_Update(ctx context.Context, req *RequestModel) (*Response, error)
	AccountingArea_Save(ctx context.Context, req *RequestModel) (*Response, error)
	AccountingArea_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	AccountingArea_Delete(ctx context.Context, req *RequestId) (*Response, error)
	AccountingArea_Restore(ctx context.Context, req *RequestId) (*Response, error)
	AccrualType_Read(ctx context.Context, req *RequestId) (*Response, error)
	AccrualType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	AccrualType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	AccrualType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	AccrualType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	AccrualType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Balance_Read(ctx context.Context, req *RequestId) (*Response, error)
	Balance_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Balance_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Balance_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Balance_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	Balance_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Balance_Restore(ctx context.Context, req *RequestId) (*Response, error)
	BankAccountOrganization_Read(ctx context.Context, req *RequestId) (*Response, error)
	BankAccountOrganization_Create(ctx context.Context, req *RequestModel) (*Response, error)
	BankAccountOrganization_Update(ctx context.Context, req *RequestModel) (*Response, error)
	BankAccountOrganization_Save(ctx context.Context, req *RequestModel) (*Response, error)
	BankAccountOrganization_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	BankAccountOrganization_Delete(ctx context.Context, req *RequestId) (*Response, error)
	BankAccountOrganization_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Bank_Read(ctx context.Context, req *RequestId) (*Response, error)
	Bank_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Bank_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Bank_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Bank_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	Bank_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Bank_Restore(ctx context.Context, req *RequestId) (*Response, error)
	BillKindType_Read(ctx context.Context, req *RequestId) (*Response, error)
	BillKindType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	BillKindType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	BillKindType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	BillKindType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	BillKindType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Branch_Read(ctx context.Context, req *RequestId) (*Response, error)
	Branch_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Branch_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Branch_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Branch_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Branch_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Calendar_Read(ctx context.Context, req *RequestId) (*Response, error)
	Calendar_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Calendar_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Calendar_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Calendar_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Calendar_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ChangeItem_Read(ctx context.Context, req *RequestId) (*Response, error)
	ChangeItem_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ChangeItem_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ChangeItem_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ChangeItem_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ChangeItem_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ChannelType_Read(ctx context.Context, req *RequestId) (*Response, error)
	ChannelType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ChannelType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ChannelType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ChannelType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ChannelType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ClaimType_Read(ctx context.Context, req *RequestId) (*Response, error)
	ClaimType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ClaimType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ClaimType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ClaimType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ClaimType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Comment_Read(ctx context.Context, req *RequestId) (*Response, error)
	Comment_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Comment_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Comment_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Comment_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Comment_Restore(ctx context.Context, req *RequestId) (*Response, error)
	CompletedMonth_Read(ctx context.Context, req *RequestId) (*Response, error)
	CompletedMonth_Create(ctx context.Context, req *RequestModel) (*Response, error)
	CompletedMonth_Update(ctx context.Context, req *RequestModel) (*Response, error)
	CompletedMonth_Save(ctx context.Context, req *RequestModel) (*Response, error)
	CompletedMonth_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	CompletedMonth_Delete(ctx context.Context, req *RequestId) (*Response, error)
	CompletedMonth_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ContractBlackItem_Read(ctx context.Context, req *RequestId) (*Response, error)
	ContractBlackItem_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ContractBlackItem_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ContractBlackItem_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ContractBlackItem_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ContractBlackItem_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ContractCategoryType_Read(ctx context.Context, req *RequestId) (*Response, error)
	ContractCategoryType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ContractCategoryType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ContractCategoryType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ContractCategoryType_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	ContractCategoryType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ContractCategoryType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ContractWhiteItem_Read(ctx context.Context, req *RequestId) (*Response, error)
	ContractWhiteItem_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ContractWhiteItem_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ContractWhiteItem_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ContractWhiteItem_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ContractWhiteItem_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Contract_Read(ctx context.Context, req *RequestId) (*Response, error)
	Contract_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Contract_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Contract_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Contract_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	Contract_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Contract_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Court_Read(ctx context.Context, req *RequestId) (*Response, error)
	Court_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Court_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Court_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Court_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Court_Restore(ctx context.Context, req *RequestId) (*Response, error)
	DayType_Read(ctx context.Context, req *RequestId) (*Response, error)
	DayType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	DayType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	DayType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	DayType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	DayType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	DebtType_Read(ctx context.Context, req *RequestId) (*Response, error)
	DebtType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	DebtType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	DebtType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	DebtType_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	DebtType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	DebtType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	DirectionType_Read(ctx context.Context, req *RequestId) (*Response, error)
	DirectionType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	DirectionType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	DirectionType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	DirectionType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	DirectionType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	DocumentLinkType_Read(ctx context.Context, req *RequestId) (*Response, error)
	DocumentLinkType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentLinkType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentLinkType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentLinkType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	DocumentLinkType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	DocumentLink_Read(ctx context.Context, req *RequestId) (*Response, error)
	DocumentLink_Create(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentLink_Update(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentLink_Save(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentLink_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	DocumentLink_Delete(ctx context.Context, req *RequestId) (*Response, error)
	DocumentLink_Restore(ctx context.Context, req *RequestId) (*Response, error)
	DocumentType_Read(ctx context.Context, req *RequestId) (*Response, error)
	DocumentType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	DocumentType_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	DocumentType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	DocumentType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Document_Read(ctx context.Context, req *RequestId) (*Response, error)
	Document_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Document_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Document_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Document_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	Document_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Document_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Employee_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	EventType_Read(ctx context.Context, req *RequestId) (*Response, error)
	EventType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	EventType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	EventType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	EventType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	EventType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Event_Read(ctx context.Context, req *RequestId) (*Response, error)
	Event_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Event_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Event_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Event_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Event_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Facsimile_Read(ctx context.Context, req *RequestId) (*Response, error)
	Facsimile_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Facsimile_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Facsimile_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Facsimile_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Facsimile_Restore(ctx context.Context, req *RequestId) (*Response, error)
	FileChange_Read(ctx context.Context, req *RequestId) (*Response, error)
	FileChange_Create(ctx context.Context, req *RequestModel) (*Response, error)
	FileChange_Update(ctx context.Context, req *RequestModel) (*Response, error)
	FileChange_Save(ctx context.Context, req *RequestModel) (*Response, error)
	FileTemplate_Read(ctx context.Context, req *RequestId) (*Response, error)
	FileTemplate_Create(ctx context.Context, req *RequestModel) (*Response, error)
	FileTemplate_Update(ctx context.Context, req *RequestModel) (*Response, error)
	FileTemplate_Save(ctx context.Context, req *RequestModel) (*Response, error)
	FileTemplate_Delete(ctx context.Context, req *RequestId) (*Response, error)
	FileTemplate_Restore(ctx context.Context, req *RequestId) (*Response, error)
	FileType_Read(ctx context.Context, req *RequestId) (*Response, error)
	FileType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	FileType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	FileType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	FileType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	FileType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	GenderType_Read(ctx context.Context, req *RequestId) (*Response, error)
	GenderType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	GenderType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	GenderType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	GenderType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	GenderType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	HashtagLink_Read(ctx context.Context, req *RequestId) (*Response, error)
	HashtagLink_Create(ctx context.Context, req *RequestModel) (*Response, error)
	HashtagLink_Update(ctx context.Context, req *RequestModel) (*Response, error)
	HashtagLink_Save(ctx context.Context, req *RequestModel) (*Response, error)
	HashtagLink_Delete(ctx context.Context, req *RequestId) (*Response, error)
	HashtagLink_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Hashtag_Read(ctx context.Context, req *RequestId) (*Response, error)
	Hashtag_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Hashtag_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Hashtag_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Hashtag_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Hashtag_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Individual_Read(ctx context.Context, req *RequestId) (*Response, error)
	Individual_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Individual_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Individual_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Individual_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	Individual_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Individual_Restore(ctx context.Context, req *RequestId) (*Response, error)
	InvoiceDebtTypeStat_Read(ctx context.Context, req *RequestId) (*Response, error)
	InvoiceDebtTypeStat_Create(ctx context.Context, req *RequestModel) (*Response, error)
	InvoiceDebtTypeStat_Update(ctx context.Context, req *RequestModel) (*Response, error)
	InvoiceDebtTypeStat_Save(ctx context.Context, req *RequestModel) (*Response, error)
	InvoiceDebtTypeStat_Delete(ctx context.Context, req *RequestId) (*Response, error)
	InvoiceDebtTypeStat_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitInvoiceCorrection_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitInvoiceCorrection_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitInvoiceCorrection_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitInvoiceCorrection_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitInvoiceCorrection_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitInvoiceCorrection_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitInvoice_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitInvoice_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitInvoice_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitInvoice_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitInvoice_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitInvoice_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitPaymentCorrection_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitPaymentCorrection_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitPaymentCorrection_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitPaymentCorrection_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitPaymentCorrection_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitPaymentCorrection_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitPayment_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitPayment_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitPayment_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitPayment_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitPayment_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitPayment_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitReasonType_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitReasonType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitReasonType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitReasonType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitReasonType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitReasonType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStageType_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStageType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStageType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStageType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStageType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStageType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitType_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Lawsuit_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	LegalType_Read(ctx context.Context, req *RequestId) (*Response, error)
	LegalType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LegalType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LegalType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LegalType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LegalType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	MessageSendStatus_Read(ctx context.Context, req *RequestId) (*Response, error)
	MessageSendStatus_Create(ctx context.Context, req *RequestModel) (*Response, error)
	MessageSendStatus_Update(ctx context.Context, req *RequestModel) (*Response, error)
	MessageSendStatus_Save(ctx context.Context, req *RequestModel) (*Response, error)
	MessageSendStatus_Delete(ctx context.Context, req *RequestId) (*Response, error)
	MessageSendStatus_Restore(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationCategoryType_Read(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationCategoryType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationCategoryType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationCategoryType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationCategoryType_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	OrganizationCategoryType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationCategoryType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationStateType_Read(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationStateType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationStateType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationStateType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationStateType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationStateType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Organization_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	PaymentDay_Read(ctx context.Context, req *RequestId) (*Response, error)
	PaymentDay_Create(ctx context.Context, req *RequestModel) (*Response, error)
	PaymentDay_Update(ctx context.Context, req *RequestModel) (*Response, error)
	PaymentDay_Save(ctx context.Context, req *RequestModel) (*Response, error)
	PaymentDay_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	PaymentDay_Delete(ctx context.Context, req *RequestId) (*Response, error)
	PaymentDay_Restore(ctx context.Context, req *RequestId) (*Response, error)
	PaymentSchedule_Read(ctx context.Context, req *RequestId) (*Response, error)
	PaymentSchedule_Create(ctx context.Context, req *RequestModel) (*Response, error)
	PaymentSchedule_Update(ctx context.Context, req *RequestModel) (*Response, error)
	PaymentSchedule_Save(ctx context.Context, req *RequestModel) (*Response, error)
	PaymentSchedule_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	PaymentSchedule_Delete(ctx context.Context, req *RequestId) (*Response, error)
	PaymentSchedule_Restore(ctx context.Context, req *RequestId) (*Response, error)
	PenaltyCalculationItem_Read(ctx context.Context, req *RequestId) (*Response, error)
	PenaltyCalculationItem_Create(ctx context.Context, req *RequestModel) (*Response, error)
	PenaltyCalculationItem_Update(ctx context.Context, req *RequestModel) (*Response, error)
	PenaltyCalculationItem_Save(ctx context.Context, req *RequestModel) (*Response, error)
	PenaltyCalculationItem_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	PenaltyCalculationItem_Delete(ctx context.Context, req *RequestId) (*Response, error)
	PenaltyCalculationItem_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ServiceProvider_Read(ctx context.Context, req *RequestId) (*Response, error)
	ServiceProvider_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ServiceProvider_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ServiceProvider_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ServiceProvider_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	ServiceProvider_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ServiceProvider_Restore(ctx context.Context, req *RequestId) (*Response, error)
	ServiceType_Read(ctx context.Context, req *RequestId) (*Response, error)
	ServiceType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	ServiceType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	ServiceType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	ServiceType_FindByExtID(ctx context.Context, req *RequestExtId) (*Response, error)
	ServiceType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	ServiceType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	StateDuty_Read(ctx context.Context, req *RequestId) (*Response, error)
	StateDuty_Create(ctx context.Context, req *RequestModel) (*Response, error)
	StateDuty_Update(ctx context.Context, req *RequestModel) (*Response, error)
	StateDuty_Save(ctx context.Context, req *RequestModel) (*Response, error)
	StateDuty_Delete(ctx context.Context, req *RequestId) (*Response, error)
	StateDuty_Restore(ctx context.Context, req *RequestId) (*Response, error)
	TableName_Read(ctx context.Context, req *RequestId) (*Response, error)
	TableName_Create(ctx context.Context, req *RequestModel) (*Response, error)
	TableName_Update(ctx context.Context, req *RequestModel) (*Response, error)
	TableName_Save(ctx context.Context, req *RequestModel) (*Response, error)
	TableName_Delete(ctx context.Context, req *RequestId) (*Response, error)
	TableName_Restore(ctx context.Context, req *RequestId) (*Response, error)
	UserRole_Read(ctx context.Context, req *RequestId) (*Response, error)
	UserRole_Create(ctx context.Context, req *RequestModel) (*Response, error)
	UserRole_Update(ctx context.Context, req *RequestModel) (*Response, error)
	UserRole_Save(ctx context.Context, req *RequestModel) (*Response, error)
	UserRole_Delete(ctx context.Context, req *RequestId) (*Response, error)
	UserRole_Restore(ctx context.Context, req *RequestId) (*Response, error)
	WhiteListReasonType_Read(ctx context.Context, req *RequestId) (*Response, error)
	WhiteListReasonType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	WhiteListReasonType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	WhiteListReasonType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	WhiteListReasonType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	WhiteListReasonType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Organization_Read(ctx context.Context, req *RequestId) (*Response, error)
	Organization_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Organization_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Organization_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Organization_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Organization_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Organization_FindByInnKpp(ctx context.Context, req *RequestInnKpp) (*Response, error)
	Organization_FindByExtId(ctx context.Context, req *RequestExtId) (*Response, error)
	File_Read(ctx context.Context, req *RequestId) (*Response, error)
	File_Create(ctx context.Context, req *RequestModel) (*Response, error)
	File_Update(ctx context.Context, req *RequestModel) (*Response, error)
	File_Save(ctx context.Context, req *RequestModel) (*Response, error)
	File_Delete(ctx context.Context, req *RequestId) (*Response, error)
	File_Restore(ctx context.Context, req *RequestId) (*Response, error)
	File_FindByFileID(ctx context.Context, req *RequestString) (*Response, error)
	File_FindByFullName(ctx context.Context, req *RequestString) (*Response, error)
	OrganizationCasebook_Read(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationCasebook_Create(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationCasebook_Update(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationCasebook_Save(ctx context.Context, req *RequestModel) (*Response, error)
	OrganizationCasebook_Delete(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationCasebook_Restore(ctx context.Context, req *RequestId) (*Response, error)
	OrganizationCasebook_FindByInnKpp(ctx context.Context, req *RequestInnKpp) (*Response, error)
	OrganizationCasebook_FindByInn(ctx context.Context, req *RequestString) (*Response, error)
	OrganizationCasebook_FindByOrganizationId(ctx context.Context, req *RequestId) (*Response, error)
	Connection_Read(ctx context.Context, req *RequestId) (*Response, error)
	Connection_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Connection_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Connection_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Employee_Read(ctx context.Context, req *RequestId) (*Response, error)
	Employee_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Employee_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Employee_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Employee_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Employee_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Employee_FindByExtId(ctx context.Context, req *RequestExtId) (*Response, error)
	Employee_FindByLogin(ctx context.Context, req *RequestString) (*Response, error)
	Employee_FindByEMail(ctx context.Context, req *RequestString) (*Response, error)
	Employee_FindByFIO(ctx context.Context, req *RequestString3) (*Response, error)
	LawsuitStatusState_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStatusState_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStatusState_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStatusState_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStatusState_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStatusState_Restore(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStatusState_FillFromLawsuit(ctx context.Context, req *RequestIdId) (*ResponseEmpty, error)
	LawsuitStatusState_FindDebtSum(ctx context.Context, req *RequestIdId) (*ResponseFloat64, error)
	LawsuitStatusType_Read(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStatusType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStatusType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStatusType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	LawsuitStatusType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	LawsuitStatusType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Lawsuit_Read(ctx context.Context, req *RequestId) (*Response, error)
	Lawsuit_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Lawsuit_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Lawsuit_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Lawsuit_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Lawsuit_Restore(ctx context.Context, req *RequestId) (*Response, error)
	MessageAttachement_Read(ctx context.Context, req *RequestId) (*Response, error)
	MessageAttachement_Create(ctx context.Context, req *RequestModel) (*Response, error)
	MessageAttachement_Update(ctx context.Context, req *RequestModel) (*Response, error)
	MessageAttachement_Save(ctx context.Context, req *RequestModel) (*Response, error)
	MessageAttachement_Delete(ctx context.Context, req *RequestId) (*Response, error)
	MessageAttachement_Restore(ctx context.Context, req *RequestId) (*Response, error)
	MessageSendStatuse_Read(ctx context.Context, req *RequestId) (*Response, error)
	MessageSendStatuse_Create(ctx context.Context, req *RequestModel) (*Response, error)
	MessageSendStatuse_Update(ctx context.Context, req *RequestModel) (*Response, error)
	MessageSendStatuse_Save(ctx context.Context, req *RequestModel) (*Response, error)
	MessageSendStatuse_Delete(ctx context.Context, req *RequestId) (*Response, error)
	MessageSendStatuse_Restore(ctx context.Context, req *RequestId) (*Response, error)
	MessageType_Read(ctx context.Context, req *RequestId) (*Response, error)
	MessageType_Create(ctx context.Context, req *RequestModel) (*Response, error)
	MessageType_Update(ctx context.Context, req *RequestModel) (*Response, error)
	MessageType_Save(ctx context.Context, req *RequestModel) (*Response, error)
	MessageType_Delete(ctx context.Context, req *RequestId) (*Response, error)
	MessageType_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Message_Read(ctx context.Context, req *RequestId) (*Response, error)
	Message_Create(ctx context.Context, req *RequestModel) (*Response, error)
	Message_Update(ctx context.Context, req *RequestModel) (*Response, error)
	Message_Save(ctx context.Context, req *RequestModel) (*Response, error)
	Message_Delete(ctx context.Context, req *RequestId) (*Response, error)
	Message_Restore(ctx context.Context, req *RequestId) (*Response, error)
	Message_FindBy_LawsuitID_MessageTypeID(ctx context.Context, req *RequestIdId) (*Response, error)
}

// Sync_serviceHandler provides a NATS subscription handler that can serve a
// subscription using a given Sync_serviceServer implementation.
type Sync_serviceHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  Sync_serviceServer

	encodings []string
}

func NewSync_serviceHandler(ctx context.Context, nc nrpc.NatsConn, s Sync_serviceServer) *Sync_serviceHandler {
	return &Sync_serviceHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewSync_serviceConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s Sync_serviceServer) *Sync_serviceHandler {
	return &Sync_serviceHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *Sync_serviceHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *Sync_serviceHandler) Subject() string {
	return "Sync_service.>"
}

func (h *Sync_serviceHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "Sync_service", 0, msg.Subject)
	if err != nil {
		log.Printf("Sync_serviceHanlder: Sync_service subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "AccountingArea_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccountingArea_ReadHanlder: AccountingArea_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccountingArea_ReadHandler: AccountingArea_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccountingArea_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccountingArea_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccountingArea_CreateHanlder: AccountingArea_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccountingArea_CreateHandler: AccountingArea_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccountingArea_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccountingArea_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccountingArea_UpdateHanlder: AccountingArea_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccountingArea_UpdateHandler: AccountingArea_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccountingArea_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccountingArea_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccountingArea_SaveHanlder: AccountingArea_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccountingArea_SaveHandler: AccountingArea_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccountingArea_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccountingArea_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccountingArea_FindByExtIDHanlder: AccountingArea_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccountingArea_FindByExtIDHandler: AccountingArea_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccountingArea_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccountingArea_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccountingArea_DeleteHanlder: AccountingArea_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccountingArea_DeleteHandler: AccountingArea_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccountingArea_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccountingArea_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccountingArea_RestoreHanlder: AccountingArea_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccountingArea_RestoreHandler: AccountingArea_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccountingArea_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccrualType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccrualType_ReadHanlder: AccrualType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccrualType_ReadHandler: AccrualType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccrualType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccrualType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccrualType_CreateHanlder: AccrualType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccrualType_CreateHandler: AccrualType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccrualType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccrualType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccrualType_UpdateHanlder: AccrualType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccrualType_UpdateHandler: AccrualType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccrualType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccrualType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccrualType_SaveHanlder: AccrualType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccrualType_SaveHandler: AccrualType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccrualType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccrualType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccrualType_DeleteHanlder: AccrualType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccrualType_DeleteHandler: AccrualType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccrualType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "AccrualType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("AccrualType_RestoreHanlder: AccrualType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("AccrualType_RestoreHandler: AccrualType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.AccrualType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Balance_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Balance_ReadHanlder: Balance_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Balance_ReadHandler: Balance_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Balance_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Balance_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Balance_CreateHanlder: Balance_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Balance_CreateHandler: Balance_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Balance_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Balance_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Balance_UpdateHanlder: Balance_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Balance_UpdateHandler: Balance_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Balance_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Balance_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Balance_SaveHanlder: Balance_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Balance_SaveHandler: Balance_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Balance_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Balance_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Balance_FindByExtIDHanlder: Balance_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Balance_FindByExtIDHandler: Balance_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Balance_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Balance_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Balance_DeleteHanlder: Balance_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Balance_DeleteHandler: Balance_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Balance_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Balance_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Balance_RestoreHanlder: Balance_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Balance_RestoreHandler: Balance_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Balance_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BankAccountOrganization_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BankAccountOrganization_ReadHanlder: BankAccountOrganization_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BankAccountOrganization_ReadHandler: BankAccountOrganization_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BankAccountOrganization_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BankAccountOrganization_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BankAccountOrganization_CreateHanlder: BankAccountOrganization_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BankAccountOrganization_CreateHandler: BankAccountOrganization_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BankAccountOrganization_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BankAccountOrganization_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BankAccountOrganization_UpdateHanlder: BankAccountOrganization_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BankAccountOrganization_UpdateHandler: BankAccountOrganization_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BankAccountOrganization_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BankAccountOrganization_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BankAccountOrganization_SaveHanlder: BankAccountOrganization_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BankAccountOrganization_SaveHandler: BankAccountOrganization_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BankAccountOrganization_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BankAccountOrganization_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BankAccountOrganization_FindByExtIDHanlder: BankAccountOrganization_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BankAccountOrganization_FindByExtIDHandler: BankAccountOrganization_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BankAccountOrganization_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BankAccountOrganization_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BankAccountOrganization_DeleteHanlder: BankAccountOrganization_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BankAccountOrganization_DeleteHandler: BankAccountOrganization_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BankAccountOrganization_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BankAccountOrganization_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BankAccountOrganization_RestoreHanlder: BankAccountOrganization_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BankAccountOrganization_RestoreHandler: BankAccountOrganization_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BankAccountOrganization_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Bank_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Bank_ReadHanlder: Bank_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Bank_ReadHandler: Bank_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Bank_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Bank_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Bank_CreateHanlder: Bank_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Bank_CreateHandler: Bank_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Bank_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Bank_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Bank_UpdateHanlder: Bank_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Bank_UpdateHandler: Bank_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Bank_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Bank_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Bank_SaveHanlder: Bank_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Bank_SaveHandler: Bank_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Bank_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Bank_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Bank_FindByExtIDHanlder: Bank_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Bank_FindByExtIDHandler: Bank_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Bank_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Bank_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Bank_DeleteHanlder: Bank_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Bank_DeleteHandler: Bank_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Bank_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Bank_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Bank_RestoreHanlder: Bank_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Bank_RestoreHandler: Bank_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Bank_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BillKindType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BillKindType_ReadHanlder: BillKindType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BillKindType_ReadHandler: BillKindType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BillKindType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BillKindType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BillKindType_CreateHanlder: BillKindType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BillKindType_CreateHandler: BillKindType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BillKindType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BillKindType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BillKindType_UpdateHanlder: BillKindType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BillKindType_UpdateHandler: BillKindType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BillKindType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BillKindType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BillKindType_SaveHanlder: BillKindType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BillKindType_SaveHandler: BillKindType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BillKindType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BillKindType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BillKindType_DeleteHanlder: BillKindType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BillKindType_DeleteHandler: BillKindType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BillKindType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "BillKindType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("BillKindType_RestoreHanlder: BillKindType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("BillKindType_RestoreHandler: BillKindType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.BillKindType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Branch_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Branch_ReadHanlder: Branch_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Branch_ReadHandler: Branch_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Branch_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Branch_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Branch_CreateHanlder: Branch_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Branch_CreateHandler: Branch_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Branch_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Branch_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Branch_UpdateHanlder: Branch_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Branch_UpdateHandler: Branch_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Branch_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Branch_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Branch_SaveHanlder: Branch_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Branch_SaveHandler: Branch_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Branch_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Branch_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Branch_DeleteHanlder: Branch_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Branch_DeleteHandler: Branch_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Branch_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Branch_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Branch_RestoreHanlder: Branch_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Branch_RestoreHandler: Branch_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Branch_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Calendar_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Calendar_ReadHanlder: Calendar_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Calendar_ReadHandler: Calendar_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Calendar_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Calendar_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Calendar_CreateHanlder: Calendar_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Calendar_CreateHandler: Calendar_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Calendar_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Calendar_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Calendar_UpdateHanlder: Calendar_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Calendar_UpdateHandler: Calendar_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Calendar_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Calendar_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Calendar_SaveHanlder: Calendar_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Calendar_SaveHandler: Calendar_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Calendar_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Calendar_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Calendar_DeleteHanlder: Calendar_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Calendar_DeleteHandler: Calendar_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Calendar_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Calendar_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Calendar_RestoreHanlder: Calendar_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Calendar_RestoreHandler: Calendar_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Calendar_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChangeItem_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChangeItem_ReadHanlder: ChangeItem_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChangeItem_ReadHandler: ChangeItem_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChangeItem_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChangeItem_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChangeItem_CreateHanlder: ChangeItem_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChangeItem_CreateHandler: ChangeItem_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChangeItem_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChangeItem_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChangeItem_UpdateHanlder: ChangeItem_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChangeItem_UpdateHandler: ChangeItem_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChangeItem_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChangeItem_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChangeItem_SaveHanlder: ChangeItem_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChangeItem_SaveHandler: ChangeItem_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChangeItem_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChangeItem_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChangeItem_DeleteHanlder: ChangeItem_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChangeItem_DeleteHandler: ChangeItem_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChangeItem_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChangeItem_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChangeItem_RestoreHanlder: ChangeItem_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChangeItem_RestoreHandler: ChangeItem_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChangeItem_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChannelType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChannelType_ReadHanlder: ChannelType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChannelType_ReadHandler: ChannelType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChannelType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChannelType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChannelType_CreateHanlder: ChannelType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChannelType_CreateHandler: ChannelType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChannelType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChannelType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChannelType_UpdateHanlder: ChannelType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChannelType_UpdateHandler: ChannelType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChannelType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChannelType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChannelType_SaveHanlder: ChannelType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChannelType_SaveHandler: ChannelType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChannelType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChannelType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChannelType_DeleteHanlder: ChannelType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChannelType_DeleteHandler: ChannelType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChannelType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ChannelType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ChannelType_RestoreHanlder: ChannelType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ChannelType_RestoreHandler: ChannelType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ChannelType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ClaimType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ClaimType_ReadHanlder: ClaimType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ClaimType_ReadHandler: ClaimType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ClaimType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ClaimType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ClaimType_CreateHanlder: ClaimType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ClaimType_CreateHandler: ClaimType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ClaimType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ClaimType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ClaimType_UpdateHanlder: ClaimType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ClaimType_UpdateHandler: ClaimType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ClaimType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ClaimType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ClaimType_SaveHanlder: ClaimType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ClaimType_SaveHandler: ClaimType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ClaimType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ClaimType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ClaimType_DeleteHanlder: ClaimType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ClaimType_DeleteHandler: ClaimType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ClaimType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ClaimType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ClaimType_RestoreHanlder: ClaimType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ClaimType_RestoreHandler: ClaimType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ClaimType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Comment_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Comment_ReadHanlder: Comment_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Comment_ReadHandler: Comment_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Comment_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Comment_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Comment_CreateHanlder: Comment_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Comment_CreateHandler: Comment_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Comment_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Comment_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Comment_UpdateHanlder: Comment_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Comment_UpdateHandler: Comment_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Comment_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Comment_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Comment_SaveHanlder: Comment_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Comment_SaveHandler: Comment_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Comment_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Comment_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Comment_DeleteHanlder: Comment_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Comment_DeleteHandler: Comment_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Comment_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Comment_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Comment_RestoreHanlder: Comment_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Comment_RestoreHandler: Comment_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Comment_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "CompletedMonth_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CompletedMonth_ReadHanlder: CompletedMonth_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CompletedMonth_ReadHandler: CompletedMonth_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.CompletedMonth_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "CompletedMonth_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CompletedMonth_CreateHanlder: CompletedMonth_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CompletedMonth_CreateHandler: CompletedMonth_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.CompletedMonth_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "CompletedMonth_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CompletedMonth_UpdateHanlder: CompletedMonth_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CompletedMonth_UpdateHandler: CompletedMonth_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.CompletedMonth_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "CompletedMonth_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CompletedMonth_SaveHanlder: CompletedMonth_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CompletedMonth_SaveHandler: CompletedMonth_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.CompletedMonth_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "CompletedMonth_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CompletedMonth_FindByExtIDHanlder: CompletedMonth_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CompletedMonth_FindByExtIDHandler: CompletedMonth_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.CompletedMonth_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "CompletedMonth_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CompletedMonth_DeleteHanlder: CompletedMonth_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CompletedMonth_DeleteHandler: CompletedMonth_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.CompletedMonth_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "CompletedMonth_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("CompletedMonth_RestoreHanlder: CompletedMonth_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("CompletedMonth_RestoreHandler: CompletedMonth_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.CompletedMonth_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractBlackItem_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractBlackItem_ReadHanlder: ContractBlackItem_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractBlackItem_ReadHandler: ContractBlackItem_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractBlackItem_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractBlackItem_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractBlackItem_CreateHanlder: ContractBlackItem_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractBlackItem_CreateHandler: ContractBlackItem_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractBlackItem_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractBlackItem_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractBlackItem_UpdateHanlder: ContractBlackItem_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractBlackItem_UpdateHandler: ContractBlackItem_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractBlackItem_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractBlackItem_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractBlackItem_SaveHanlder: ContractBlackItem_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractBlackItem_SaveHandler: ContractBlackItem_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractBlackItem_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractBlackItem_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractBlackItem_DeleteHanlder: ContractBlackItem_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractBlackItem_DeleteHandler: ContractBlackItem_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractBlackItem_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractBlackItem_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractBlackItem_RestoreHanlder: ContractBlackItem_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractBlackItem_RestoreHandler: ContractBlackItem_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractBlackItem_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractCategoryType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractCategoryType_ReadHanlder: ContractCategoryType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractCategoryType_ReadHandler: ContractCategoryType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractCategoryType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractCategoryType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractCategoryType_CreateHanlder: ContractCategoryType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractCategoryType_CreateHandler: ContractCategoryType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractCategoryType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractCategoryType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractCategoryType_UpdateHanlder: ContractCategoryType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractCategoryType_UpdateHandler: ContractCategoryType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractCategoryType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractCategoryType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractCategoryType_SaveHanlder: ContractCategoryType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractCategoryType_SaveHandler: ContractCategoryType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractCategoryType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractCategoryType_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractCategoryType_FindByExtIDHanlder: ContractCategoryType_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractCategoryType_FindByExtIDHandler: ContractCategoryType_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractCategoryType_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractCategoryType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractCategoryType_DeleteHanlder: ContractCategoryType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractCategoryType_DeleteHandler: ContractCategoryType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractCategoryType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractCategoryType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractCategoryType_RestoreHanlder: ContractCategoryType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractCategoryType_RestoreHandler: ContractCategoryType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractCategoryType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractWhiteItem_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractWhiteItem_ReadHanlder: ContractWhiteItem_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractWhiteItem_ReadHandler: ContractWhiteItem_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractWhiteItem_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractWhiteItem_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractWhiteItem_CreateHanlder: ContractWhiteItem_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractWhiteItem_CreateHandler: ContractWhiteItem_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractWhiteItem_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractWhiteItem_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractWhiteItem_UpdateHanlder: ContractWhiteItem_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractWhiteItem_UpdateHandler: ContractWhiteItem_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractWhiteItem_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractWhiteItem_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractWhiteItem_SaveHanlder: ContractWhiteItem_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractWhiteItem_SaveHandler: ContractWhiteItem_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractWhiteItem_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractWhiteItem_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractWhiteItem_DeleteHanlder: ContractWhiteItem_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractWhiteItem_DeleteHandler: ContractWhiteItem_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractWhiteItem_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ContractWhiteItem_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ContractWhiteItem_RestoreHanlder: ContractWhiteItem_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ContractWhiteItem_RestoreHandler: ContractWhiteItem_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ContractWhiteItem_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Contract_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Contract_ReadHanlder: Contract_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Contract_ReadHandler: Contract_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Contract_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Contract_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Contract_CreateHanlder: Contract_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Contract_CreateHandler: Contract_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Contract_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Contract_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Contract_UpdateHanlder: Contract_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Contract_UpdateHandler: Contract_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Contract_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Contract_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Contract_SaveHanlder: Contract_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Contract_SaveHandler: Contract_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Contract_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Contract_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Contract_FindByExtIDHanlder: Contract_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Contract_FindByExtIDHandler: Contract_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Contract_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Contract_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Contract_DeleteHanlder: Contract_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Contract_DeleteHandler: Contract_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Contract_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Contract_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Contract_RestoreHanlder: Contract_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Contract_RestoreHandler: Contract_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Contract_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Court_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Court_ReadHanlder: Court_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Court_ReadHandler: Court_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Court_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Court_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Court_CreateHanlder: Court_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Court_CreateHandler: Court_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Court_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Court_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Court_UpdateHanlder: Court_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Court_UpdateHandler: Court_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Court_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Court_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Court_SaveHanlder: Court_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Court_SaveHandler: Court_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Court_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Court_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Court_DeleteHanlder: Court_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Court_DeleteHandler: Court_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Court_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Court_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Court_RestoreHanlder: Court_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Court_RestoreHandler: Court_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Court_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DayType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DayType_ReadHanlder: DayType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DayType_ReadHandler: DayType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DayType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DayType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DayType_CreateHanlder: DayType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DayType_CreateHandler: DayType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DayType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DayType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DayType_UpdateHanlder: DayType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DayType_UpdateHandler: DayType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DayType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DayType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DayType_SaveHanlder: DayType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DayType_SaveHandler: DayType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DayType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DayType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DayType_DeleteHanlder: DayType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DayType_DeleteHandler: DayType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DayType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DayType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DayType_RestoreHanlder: DayType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DayType_RestoreHandler: DayType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DayType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DebtType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DebtType_ReadHanlder: DebtType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DebtType_ReadHandler: DebtType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DebtType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DebtType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DebtType_CreateHanlder: DebtType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DebtType_CreateHandler: DebtType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DebtType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DebtType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DebtType_UpdateHanlder: DebtType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DebtType_UpdateHandler: DebtType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DebtType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DebtType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DebtType_SaveHanlder: DebtType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DebtType_SaveHandler: DebtType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DebtType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DebtType_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DebtType_FindByExtIDHanlder: DebtType_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DebtType_FindByExtIDHandler: DebtType_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DebtType_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DebtType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DebtType_DeleteHanlder: DebtType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DebtType_DeleteHandler: DebtType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DebtType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DebtType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DebtType_RestoreHanlder: DebtType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DebtType_RestoreHandler: DebtType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DebtType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DirectionType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DirectionType_ReadHanlder: DirectionType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DirectionType_ReadHandler: DirectionType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DirectionType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DirectionType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DirectionType_CreateHanlder: DirectionType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DirectionType_CreateHandler: DirectionType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DirectionType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DirectionType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DirectionType_UpdateHanlder: DirectionType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DirectionType_UpdateHandler: DirectionType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DirectionType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DirectionType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DirectionType_SaveHanlder: DirectionType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DirectionType_SaveHandler: DirectionType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DirectionType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DirectionType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DirectionType_DeleteHanlder: DirectionType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DirectionType_DeleteHandler: DirectionType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DirectionType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DirectionType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DirectionType_RestoreHanlder: DirectionType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DirectionType_RestoreHandler: DirectionType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DirectionType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLinkType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLinkType_ReadHanlder: DocumentLinkType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLinkType_ReadHandler: DocumentLinkType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLinkType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLinkType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLinkType_CreateHanlder: DocumentLinkType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLinkType_CreateHandler: DocumentLinkType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLinkType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLinkType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLinkType_UpdateHanlder: DocumentLinkType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLinkType_UpdateHandler: DocumentLinkType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLinkType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLinkType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLinkType_SaveHanlder: DocumentLinkType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLinkType_SaveHandler: DocumentLinkType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLinkType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLinkType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLinkType_DeleteHanlder: DocumentLinkType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLinkType_DeleteHandler: DocumentLinkType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLinkType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLinkType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLinkType_RestoreHanlder: DocumentLinkType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLinkType_RestoreHandler: DocumentLinkType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLinkType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLink_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLink_ReadHanlder: DocumentLink_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLink_ReadHandler: DocumentLink_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLink_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLink_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLink_CreateHanlder: DocumentLink_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLink_CreateHandler: DocumentLink_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLink_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLink_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLink_UpdateHanlder: DocumentLink_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLink_UpdateHandler: DocumentLink_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLink_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLink_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLink_SaveHanlder: DocumentLink_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLink_SaveHandler: DocumentLink_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLink_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLink_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLink_FindByExtIDHanlder: DocumentLink_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLink_FindByExtIDHandler: DocumentLink_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLink_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLink_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLink_DeleteHanlder: DocumentLink_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLink_DeleteHandler: DocumentLink_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLink_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentLink_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentLink_RestoreHanlder: DocumentLink_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentLink_RestoreHandler: DocumentLink_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentLink_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentType_ReadHanlder: DocumentType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentType_ReadHandler: DocumentType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentType_CreateHanlder: DocumentType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentType_CreateHandler: DocumentType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentType_UpdateHanlder: DocumentType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentType_UpdateHandler: DocumentType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentType_SaveHanlder: DocumentType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentType_SaveHandler: DocumentType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentType_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentType_FindByExtIDHanlder: DocumentType_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentType_FindByExtIDHandler: DocumentType_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentType_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentType_DeleteHanlder: DocumentType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentType_DeleteHandler: DocumentType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "DocumentType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DocumentType_RestoreHanlder: DocumentType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DocumentType_RestoreHandler: DocumentType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.DocumentType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Document_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Document_ReadHanlder: Document_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Document_ReadHandler: Document_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Document_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Document_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Document_CreateHanlder: Document_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Document_CreateHandler: Document_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Document_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Document_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Document_UpdateHanlder: Document_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Document_UpdateHandler: Document_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Document_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Document_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Document_SaveHanlder: Document_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Document_SaveHandler: Document_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Document_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Document_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Document_FindByExtIDHanlder: Document_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Document_FindByExtIDHandler: Document_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Document_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Document_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Document_DeleteHanlder: Document_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Document_DeleteHandler: Document_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Document_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Document_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Document_RestoreHanlder: Document_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Document_RestoreHandler: Document_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Document_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_FindByExtIDHanlder: Employee_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_FindByExtIDHandler: Employee_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "EventType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("EventType_ReadHanlder: EventType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("EventType_ReadHandler: EventType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.EventType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "EventType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("EventType_CreateHanlder: EventType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("EventType_CreateHandler: EventType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.EventType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "EventType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("EventType_UpdateHanlder: EventType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("EventType_UpdateHandler: EventType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.EventType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "EventType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("EventType_SaveHanlder: EventType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("EventType_SaveHandler: EventType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.EventType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "EventType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("EventType_DeleteHanlder: EventType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("EventType_DeleteHandler: EventType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.EventType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "EventType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("EventType_RestoreHanlder: EventType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("EventType_RestoreHandler: EventType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.EventType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Event_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Event_ReadHanlder: Event_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Event_ReadHandler: Event_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Event_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Event_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Event_CreateHanlder: Event_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Event_CreateHandler: Event_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Event_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Event_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Event_UpdateHanlder: Event_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Event_UpdateHandler: Event_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Event_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Event_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Event_SaveHanlder: Event_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Event_SaveHandler: Event_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Event_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Event_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Event_DeleteHanlder: Event_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Event_DeleteHandler: Event_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Event_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Event_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Event_RestoreHanlder: Event_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Event_RestoreHandler: Event_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Event_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Facsimile_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Facsimile_ReadHanlder: Facsimile_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Facsimile_ReadHandler: Facsimile_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Facsimile_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Facsimile_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Facsimile_CreateHanlder: Facsimile_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Facsimile_CreateHandler: Facsimile_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Facsimile_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Facsimile_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Facsimile_UpdateHanlder: Facsimile_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Facsimile_UpdateHandler: Facsimile_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Facsimile_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Facsimile_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Facsimile_SaveHanlder: Facsimile_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Facsimile_SaveHandler: Facsimile_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Facsimile_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Facsimile_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Facsimile_DeleteHanlder: Facsimile_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Facsimile_DeleteHandler: Facsimile_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Facsimile_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Facsimile_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Facsimile_RestoreHanlder: Facsimile_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Facsimile_RestoreHandler: Facsimile_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Facsimile_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileChange_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileChange_ReadHanlder: FileChange_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileChange_ReadHandler: FileChange_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileChange_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileChange_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileChange_CreateHanlder: FileChange_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileChange_CreateHandler: FileChange_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileChange_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileChange_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileChange_UpdateHanlder: FileChange_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileChange_UpdateHandler: FileChange_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileChange_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileChange_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileChange_SaveHanlder: FileChange_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileChange_SaveHandler: FileChange_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileChange_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileTemplate_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileTemplate_ReadHanlder: FileTemplate_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileTemplate_ReadHandler: FileTemplate_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileTemplate_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileTemplate_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileTemplate_CreateHanlder: FileTemplate_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileTemplate_CreateHandler: FileTemplate_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileTemplate_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileTemplate_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileTemplate_UpdateHanlder: FileTemplate_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileTemplate_UpdateHandler: FileTemplate_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileTemplate_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileTemplate_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileTemplate_SaveHanlder: FileTemplate_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileTemplate_SaveHandler: FileTemplate_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileTemplate_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileTemplate_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileTemplate_DeleteHanlder: FileTemplate_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileTemplate_DeleteHandler: FileTemplate_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileTemplate_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileTemplate_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileTemplate_RestoreHanlder: FileTemplate_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileTemplate_RestoreHandler: FileTemplate_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileTemplate_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileType_ReadHanlder: FileType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileType_ReadHandler: FileType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileType_CreateHanlder: FileType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileType_CreateHandler: FileType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileType_UpdateHanlder: FileType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileType_UpdateHandler: FileType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileType_SaveHanlder: FileType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileType_SaveHandler: FileType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileType_DeleteHanlder: FileType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileType_DeleteHandler: FileType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "FileType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("FileType_RestoreHanlder: FileType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("FileType_RestoreHandler: FileType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.FileType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "GenderType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("GenderType_ReadHanlder: GenderType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("GenderType_ReadHandler: GenderType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.GenderType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "GenderType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("GenderType_CreateHanlder: GenderType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("GenderType_CreateHandler: GenderType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.GenderType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "GenderType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("GenderType_UpdateHanlder: GenderType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("GenderType_UpdateHandler: GenderType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.GenderType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "GenderType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("GenderType_SaveHanlder: GenderType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("GenderType_SaveHandler: GenderType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.GenderType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "GenderType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("GenderType_DeleteHanlder: GenderType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("GenderType_DeleteHandler: GenderType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.GenderType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "GenderType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("GenderType_RestoreHanlder: GenderType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("GenderType_RestoreHandler: GenderType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.GenderType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "HashtagLink_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("HashtagLink_ReadHanlder: HashtagLink_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("HashtagLink_ReadHandler: HashtagLink_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.HashtagLink_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "HashtagLink_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("HashtagLink_CreateHanlder: HashtagLink_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("HashtagLink_CreateHandler: HashtagLink_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.HashtagLink_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "HashtagLink_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("HashtagLink_UpdateHanlder: HashtagLink_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("HashtagLink_UpdateHandler: HashtagLink_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.HashtagLink_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "HashtagLink_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("HashtagLink_SaveHanlder: HashtagLink_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("HashtagLink_SaveHandler: HashtagLink_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.HashtagLink_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "HashtagLink_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("HashtagLink_DeleteHanlder: HashtagLink_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("HashtagLink_DeleteHandler: HashtagLink_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.HashtagLink_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "HashtagLink_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("HashtagLink_RestoreHanlder: HashtagLink_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("HashtagLink_RestoreHandler: HashtagLink_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.HashtagLink_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Hashtag_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Hashtag_ReadHanlder: Hashtag_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Hashtag_ReadHandler: Hashtag_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Hashtag_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Hashtag_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Hashtag_CreateHanlder: Hashtag_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Hashtag_CreateHandler: Hashtag_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Hashtag_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Hashtag_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Hashtag_UpdateHanlder: Hashtag_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Hashtag_UpdateHandler: Hashtag_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Hashtag_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Hashtag_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Hashtag_SaveHanlder: Hashtag_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Hashtag_SaveHandler: Hashtag_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Hashtag_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Hashtag_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Hashtag_DeleteHanlder: Hashtag_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Hashtag_DeleteHandler: Hashtag_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Hashtag_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Hashtag_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Hashtag_RestoreHanlder: Hashtag_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Hashtag_RestoreHandler: Hashtag_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Hashtag_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Individual_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Individual_ReadHanlder: Individual_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Individual_ReadHandler: Individual_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Individual_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Individual_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Individual_CreateHanlder: Individual_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Individual_CreateHandler: Individual_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Individual_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Individual_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Individual_UpdateHanlder: Individual_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Individual_UpdateHandler: Individual_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Individual_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Individual_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Individual_SaveHanlder: Individual_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Individual_SaveHandler: Individual_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Individual_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Individual_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Individual_FindByExtIDHanlder: Individual_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Individual_FindByExtIDHandler: Individual_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Individual_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Individual_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Individual_DeleteHanlder: Individual_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Individual_DeleteHandler: Individual_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Individual_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Individual_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Individual_RestoreHanlder: Individual_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Individual_RestoreHandler: Individual_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Individual_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "InvoiceDebtTypeStat_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("InvoiceDebtTypeStat_ReadHanlder: InvoiceDebtTypeStat_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("InvoiceDebtTypeStat_ReadHandler: InvoiceDebtTypeStat_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.InvoiceDebtTypeStat_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "InvoiceDebtTypeStat_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("InvoiceDebtTypeStat_CreateHanlder: InvoiceDebtTypeStat_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("InvoiceDebtTypeStat_CreateHandler: InvoiceDebtTypeStat_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.InvoiceDebtTypeStat_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "InvoiceDebtTypeStat_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("InvoiceDebtTypeStat_UpdateHanlder: InvoiceDebtTypeStat_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("InvoiceDebtTypeStat_UpdateHandler: InvoiceDebtTypeStat_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.InvoiceDebtTypeStat_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "InvoiceDebtTypeStat_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("InvoiceDebtTypeStat_SaveHanlder: InvoiceDebtTypeStat_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("InvoiceDebtTypeStat_SaveHandler: InvoiceDebtTypeStat_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.InvoiceDebtTypeStat_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "InvoiceDebtTypeStat_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("InvoiceDebtTypeStat_DeleteHanlder: InvoiceDebtTypeStat_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("InvoiceDebtTypeStat_DeleteHandler: InvoiceDebtTypeStat_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.InvoiceDebtTypeStat_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "InvoiceDebtTypeStat_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("InvoiceDebtTypeStat_RestoreHanlder: InvoiceDebtTypeStat_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("InvoiceDebtTypeStat_RestoreHandler: InvoiceDebtTypeStat_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.InvoiceDebtTypeStat_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoiceCorrection_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoiceCorrection_ReadHanlder: LawsuitInvoiceCorrection_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoiceCorrection_ReadHandler: LawsuitInvoiceCorrection_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoiceCorrection_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoiceCorrection_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoiceCorrection_CreateHanlder: LawsuitInvoiceCorrection_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoiceCorrection_CreateHandler: LawsuitInvoiceCorrection_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoiceCorrection_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoiceCorrection_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoiceCorrection_UpdateHanlder: LawsuitInvoiceCorrection_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoiceCorrection_UpdateHandler: LawsuitInvoiceCorrection_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoiceCorrection_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoiceCorrection_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoiceCorrection_SaveHanlder: LawsuitInvoiceCorrection_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoiceCorrection_SaveHandler: LawsuitInvoiceCorrection_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoiceCorrection_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoiceCorrection_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoiceCorrection_DeleteHanlder: LawsuitInvoiceCorrection_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoiceCorrection_DeleteHandler: LawsuitInvoiceCorrection_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoiceCorrection_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoiceCorrection_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoiceCorrection_RestoreHanlder: LawsuitInvoiceCorrection_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoiceCorrection_RestoreHandler: LawsuitInvoiceCorrection_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoiceCorrection_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoice_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoice_ReadHanlder: LawsuitInvoice_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoice_ReadHandler: LawsuitInvoice_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoice_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoice_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoice_CreateHanlder: LawsuitInvoice_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoice_CreateHandler: LawsuitInvoice_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoice_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoice_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoice_UpdateHanlder: LawsuitInvoice_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoice_UpdateHandler: LawsuitInvoice_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoice_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoice_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoice_SaveHanlder: LawsuitInvoice_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoice_SaveHandler: LawsuitInvoice_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoice_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoice_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoice_DeleteHanlder: LawsuitInvoice_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoice_DeleteHandler: LawsuitInvoice_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoice_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitInvoice_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitInvoice_RestoreHanlder: LawsuitInvoice_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitInvoice_RestoreHandler: LawsuitInvoice_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitInvoice_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPaymentCorrection_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPaymentCorrection_ReadHanlder: LawsuitPaymentCorrection_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPaymentCorrection_ReadHandler: LawsuitPaymentCorrection_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPaymentCorrection_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPaymentCorrection_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPaymentCorrection_CreateHanlder: LawsuitPaymentCorrection_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPaymentCorrection_CreateHandler: LawsuitPaymentCorrection_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPaymentCorrection_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPaymentCorrection_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPaymentCorrection_UpdateHanlder: LawsuitPaymentCorrection_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPaymentCorrection_UpdateHandler: LawsuitPaymentCorrection_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPaymentCorrection_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPaymentCorrection_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPaymentCorrection_SaveHanlder: LawsuitPaymentCorrection_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPaymentCorrection_SaveHandler: LawsuitPaymentCorrection_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPaymentCorrection_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPaymentCorrection_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPaymentCorrection_DeleteHanlder: LawsuitPaymentCorrection_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPaymentCorrection_DeleteHandler: LawsuitPaymentCorrection_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPaymentCorrection_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPaymentCorrection_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPaymentCorrection_RestoreHanlder: LawsuitPaymentCorrection_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPaymentCorrection_RestoreHandler: LawsuitPaymentCorrection_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPaymentCorrection_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPayment_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPayment_ReadHanlder: LawsuitPayment_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPayment_ReadHandler: LawsuitPayment_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPayment_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPayment_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPayment_CreateHanlder: LawsuitPayment_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPayment_CreateHandler: LawsuitPayment_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPayment_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPayment_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPayment_UpdateHanlder: LawsuitPayment_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPayment_UpdateHandler: LawsuitPayment_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPayment_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPayment_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPayment_SaveHanlder: LawsuitPayment_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPayment_SaveHandler: LawsuitPayment_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPayment_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPayment_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPayment_DeleteHanlder: LawsuitPayment_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPayment_DeleteHandler: LawsuitPayment_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPayment_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitPayment_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitPayment_RestoreHanlder: LawsuitPayment_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitPayment_RestoreHandler: LawsuitPayment_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitPayment_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitReasonType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitReasonType_ReadHanlder: LawsuitReasonType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitReasonType_ReadHandler: LawsuitReasonType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitReasonType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitReasonType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitReasonType_CreateHanlder: LawsuitReasonType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitReasonType_CreateHandler: LawsuitReasonType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitReasonType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitReasonType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitReasonType_UpdateHanlder: LawsuitReasonType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitReasonType_UpdateHandler: LawsuitReasonType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitReasonType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitReasonType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitReasonType_SaveHanlder: LawsuitReasonType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitReasonType_SaveHandler: LawsuitReasonType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitReasonType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitReasonType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitReasonType_DeleteHanlder: LawsuitReasonType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitReasonType_DeleteHandler: LawsuitReasonType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitReasonType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitReasonType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitReasonType_RestoreHanlder: LawsuitReasonType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitReasonType_RestoreHandler: LawsuitReasonType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitReasonType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStageType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStageType_ReadHanlder: LawsuitStageType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStageType_ReadHandler: LawsuitStageType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStageType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStageType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStageType_CreateHanlder: LawsuitStageType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStageType_CreateHandler: LawsuitStageType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStageType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStageType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStageType_UpdateHanlder: LawsuitStageType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStageType_UpdateHandler: LawsuitStageType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStageType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStageType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStageType_SaveHanlder: LawsuitStageType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStageType_SaveHandler: LawsuitStageType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStageType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStageType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStageType_DeleteHanlder: LawsuitStageType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStageType_DeleteHandler: LawsuitStageType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStageType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStageType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStageType_RestoreHanlder: LawsuitStageType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStageType_RestoreHandler: LawsuitStageType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStageType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitType_ReadHanlder: LawsuitType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitType_ReadHandler: LawsuitType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitType_CreateHanlder: LawsuitType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitType_CreateHandler: LawsuitType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitType_UpdateHanlder: LawsuitType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitType_UpdateHandler: LawsuitType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitType_SaveHanlder: LawsuitType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitType_SaveHandler: LawsuitType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitType_DeleteHanlder: LawsuitType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitType_DeleteHandler: LawsuitType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitType_RestoreHanlder: LawsuitType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitType_RestoreHandler: LawsuitType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Lawsuit_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Lawsuit_FindByExtIDHanlder: Lawsuit_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Lawsuit_FindByExtIDHandler: Lawsuit_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Lawsuit_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LegalType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LegalType_ReadHanlder: LegalType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LegalType_ReadHandler: LegalType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LegalType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LegalType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LegalType_CreateHanlder: LegalType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LegalType_CreateHandler: LegalType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LegalType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LegalType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LegalType_UpdateHanlder: LegalType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LegalType_UpdateHandler: LegalType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LegalType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LegalType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LegalType_SaveHanlder: LegalType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LegalType_SaveHandler: LegalType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LegalType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LegalType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LegalType_DeleteHanlder: LegalType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LegalType_DeleteHandler: LegalType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LegalType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LegalType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LegalType_RestoreHanlder: LegalType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LegalType_RestoreHandler: LegalType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LegalType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatus_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatus_ReadHanlder: MessageSendStatus_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatus_ReadHandler: MessageSendStatus_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatus_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatus_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatus_CreateHanlder: MessageSendStatus_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatus_CreateHandler: MessageSendStatus_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatus_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatus_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatus_UpdateHanlder: MessageSendStatus_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatus_UpdateHandler: MessageSendStatus_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatus_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatus_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatus_SaveHanlder: MessageSendStatus_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatus_SaveHandler: MessageSendStatus_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatus_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatus_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatus_DeleteHanlder: MessageSendStatus_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatus_DeleteHandler: MessageSendStatus_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatus_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatus_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatus_RestoreHanlder: MessageSendStatus_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatus_RestoreHandler: MessageSendStatus_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatus_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCategoryType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCategoryType_ReadHanlder: OrganizationCategoryType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCategoryType_ReadHandler: OrganizationCategoryType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCategoryType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCategoryType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCategoryType_CreateHanlder: OrganizationCategoryType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCategoryType_CreateHandler: OrganizationCategoryType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCategoryType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCategoryType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCategoryType_UpdateHanlder: OrganizationCategoryType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCategoryType_UpdateHandler: OrganizationCategoryType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCategoryType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCategoryType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCategoryType_SaveHanlder: OrganizationCategoryType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCategoryType_SaveHandler: OrganizationCategoryType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCategoryType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCategoryType_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCategoryType_FindByExtIDHanlder: OrganizationCategoryType_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCategoryType_FindByExtIDHandler: OrganizationCategoryType_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCategoryType_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCategoryType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCategoryType_DeleteHanlder: OrganizationCategoryType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCategoryType_DeleteHandler: OrganizationCategoryType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCategoryType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCategoryType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCategoryType_RestoreHanlder: OrganizationCategoryType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCategoryType_RestoreHandler: OrganizationCategoryType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCategoryType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationStateType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationStateType_ReadHanlder: OrganizationStateType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationStateType_ReadHandler: OrganizationStateType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationStateType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationStateType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationStateType_CreateHanlder: OrganizationStateType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationStateType_CreateHandler: OrganizationStateType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationStateType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationStateType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationStateType_UpdateHanlder: OrganizationStateType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationStateType_UpdateHandler: OrganizationStateType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationStateType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationStateType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationStateType_SaveHanlder: OrganizationStateType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationStateType_SaveHandler: OrganizationStateType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationStateType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationStateType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationStateType_DeleteHanlder: OrganizationStateType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationStateType_DeleteHandler: OrganizationStateType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationStateType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationStateType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationStateType_RestoreHanlder: OrganizationStateType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationStateType_RestoreHandler: OrganizationStateType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationStateType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_FindByExtIDHanlder: Organization_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_FindByExtIDHandler: Organization_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentDay_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentDay_ReadHanlder: PaymentDay_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentDay_ReadHandler: PaymentDay_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentDay_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentDay_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentDay_CreateHanlder: PaymentDay_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentDay_CreateHandler: PaymentDay_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentDay_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentDay_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentDay_UpdateHanlder: PaymentDay_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentDay_UpdateHandler: PaymentDay_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentDay_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentDay_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentDay_SaveHanlder: PaymentDay_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentDay_SaveHandler: PaymentDay_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentDay_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentDay_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentDay_FindByExtIDHanlder: PaymentDay_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentDay_FindByExtIDHandler: PaymentDay_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentDay_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentDay_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentDay_DeleteHanlder: PaymentDay_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentDay_DeleteHandler: PaymentDay_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentDay_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentDay_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentDay_RestoreHanlder: PaymentDay_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentDay_RestoreHandler: PaymentDay_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentDay_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentSchedule_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentSchedule_ReadHanlder: PaymentSchedule_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentSchedule_ReadHandler: PaymentSchedule_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentSchedule_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentSchedule_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentSchedule_CreateHanlder: PaymentSchedule_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentSchedule_CreateHandler: PaymentSchedule_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentSchedule_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentSchedule_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentSchedule_UpdateHanlder: PaymentSchedule_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentSchedule_UpdateHandler: PaymentSchedule_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentSchedule_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentSchedule_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentSchedule_SaveHanlder: PaymentSchedule_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentSchedule_SaveHandler: PaymentSchedule_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentSchedule_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentSchedule_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentSchedule_FindByExtIDHanlder: PaymentSchedule_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentSchedule_FindByExtIDHandler: PaymentSchedule_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentSchedule_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentSchedule_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentSchedule_DeleteHanlder: PaymentSchedule_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentSchedule_DeleteHandler: PaymentSchedule_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentSchedule_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PaymentSchedule_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PaymentSchedule_RestoreHanlder: PaymentSchedule_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PaymentSchedule_RestoreHandler: PaymentSchedule_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PaymentSchedule_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PenaltyCalculationItem_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PenaltyCalculationItem_ReadHanlder: PenaltyCalculationItem_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PenaltyCalculationItem_ReadHandler: PenaltyCalculationItem_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PenaltyCalculationItem_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PenaltyCalculationItem_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PenaltyCalculationItem_CreateHanlder: PenaltyCalculationItem_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PenaltyCalculationItem_CreateHandler: PenaltyCalculationItem_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PenaltyCalculationItem_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PenaltyCalculationItem_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PenaltyCalculationItem_UpdateHanlder: PenaltyCalculationItem_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PenaltyCalculationItem_UpdateHandler: PenaltyCalculationItem_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PenaltyCalculationItem_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PenaltyCalculationItem_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PenaltyCalculationItem_SaveHanlder: PenaltyCalculationItem_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PenaltyCalculationItem_SaveHandler: PenaltyCalculationItem_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PenaltyCalculationItem_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PenaltyCalculationItem_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PenaltyCalculationItem_FindByExtIDHanlder: PenaltyCalculationItem_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PenaltyCalculationItem_FindByExtIDHandler: PenaltyCalculationItem_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PenaltyCalculationItem_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PenaltyCalculationItem_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PenaltyCalculationItem_DeleteHanlder: PenaltyCalculationItem_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PenaltyCalculationItem_DeleteHandler: PenaltyCalculationItem_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PenaltyCalculationItem_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "PenaltyCalculationItem_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("PenaltyCalculationItem_RestoreHanlder: PenaltyCalculationItem_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("PenaltyCalculationItem_RestoreHandler: PenaltyCalculationItem_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.PenaltyCalculationItem_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceProvider_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceProvider_ReadHanlder: ServiceProvider_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceProvider_ReadHandler: ServiceProvider_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceProvider_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceProvider_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceProvider_CreateHanlder: ServiceProvider_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceProvider_CreateHandler: ServiceProvider_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceProvider_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceProvider_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceProvider_UpdateHanlder: ServiceProvider_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceProvider_UpdateHandler: ServiceProvider_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceProvider_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceProvider_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceProvider_SaveHanlder: ServiceProvider_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceProvider_SaveHandler: ServiceProvider_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceProvider_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceProvider_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceProvider_FindByExtIDHanlder: ServiceProvider_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceProvider_FindByExtIDHandler: ServiceProvider_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceProvider_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceProvider_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceProvider_DeleteHanlder: ServiceProvider_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceProvider_DeleteHandler: ServiceProvider_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceProvider_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceProvider_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceProvider_RestoreHanlder: ServiceProvider_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceProvider_RestoreHandler: ServiceProvider_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceProvider_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceType_ReadHanlder: ServiceType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceType_ReadHandler: ServiceType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceType_CreateHanlder: ServiceType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceType_CreateHandler: ServiceType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceType_UpdateHanlder: ServiceType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceType_UpdateHandler: ServiceType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceType_SaveHanlder: ServiceType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceType_SaveHandler: ServiceType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceType_FindByExtID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceType_FindByExtIDHanlder: ServiceType_FindByExtID subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceType_FindByExtIDHandler: ServiceType_FindByExtID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceType_FindByExtID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceType_DeleteHanlder: ServiceType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceType_DeleteHandler: ServiceType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "ServiceType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("ServiceType_RestoreHanlder: ServiceType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("ServiceType_RestoreHandler: ServiceType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.ServiceType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "StateDuty_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("StateDuty_ReadHanlder: StateDuty_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("StateDuty_ReadHandler: StateDuty_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.StateDuty_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "StateDuty_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("StateDuty_CreateHanlder: StateDuty_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("StateDuty_CreateHandler: StateDuty_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.StateDuty_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "StateDuty_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("StateDuty_UpdateHanlder: StateDuty_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("StateDuty_UpdateHandler: StateDuty_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.StateDuty_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "StateDuty_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("StateDuty_SaveHanlder: StateDuty_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("StateDuty_SaveHandler: StateDuty_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.StateDuty_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "StateDuty_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("StateDuty_DeleteHanlder: StateDuty_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("StateDuty_DeleteHandler: StateDuty_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.StateDuty_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "StateDuty_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("StateDuty_RestoreHanlder: StateDuty_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("StateDuty_RestoreHandler: StateDuty_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.StateDuty_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "TableName_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("TableName_ReadHanlder: TableName_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("TableName_ReadHandler: TableName_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.TableName_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "TableName_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("TableName_CreateHanlder: TableName_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("TableName_CreateHandler: TableName_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.TableName_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "TableName_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("TableName_UpdateHanlder: TableName_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("TableName_UpdateHandler: TableName_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.TableName_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "TableName_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("TableName_SaveHanlder: TableName_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("TableName_SaveHandler: TableName_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.TableName_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "TableName_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("TableName_DeleteHanlder: TableName_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("TableName_DeleteHandler: TableName_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.TableName_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "TableName_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("TableName_RestoreHanlder: TableName_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("TableName_RestoreHandler: TableName_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.TableName_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "UserRole_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("UserRole_ReadHanlder: UserRole_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("UserRole_ReadHandler: UserRole_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.UserRole_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "UserRole_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("UserRole_CreateHanlder: UserRole_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("UserRole_CreateHandler: UserRole_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.UserRole_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "UserRole_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("UserRole_UpdateHanlder: UserRole_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("UserRole_UpdateHandler: UserRole_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.UserRole_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "UserRole_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("UserRole_SaveHanlder: UserRole_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("UserRole_SaveHandler: UserRole_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.UserRole_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "UserRole_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("UserRole_DeleteHanlder: UserRole_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("UserRole_DeleteHandler: UserRole_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.UserRole_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "UserRole_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("UserRole_RestoreHanlder: UserRole_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("UserRole_RestoreHandler: UserRole_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.UserRole_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "WhiteListReasonType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("WhiteListReasonType_ReadHanlder: WhiteListReasonType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("WhiteListReasonType_ReadHandler: WhiteListReasonType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.WhiteListReasonType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "WhiteListReasonType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("WhiteListReasonType_CreateHanlder: WhiteListReasonType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("WhiteListReasonType_CreateHandler: WhiteListReasonType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.WhiteListReasonType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "WhiteListReasonType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("WhiteListReasonType_UpdateHanlder: WhiteListReasonType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("WhiteListReasonType_UpdateHandler: WhiteListReasonType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.WhiteListReasonType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "WhiteListReasonType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("WhiteListReasonType_SaveHanlder: WhiteListReasonType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("WhiteListReasonType_SaveHandler: WhiteListReasonType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.WhiteListReasonType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "WhiteListReasonType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("WhiteListReasonType_DeleteHanlder: WhiteListReasonType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("WhiteListReasonType_DeleteHandler: WhiteListReasonType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.WhiteListReasonType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "WhiteListReasonType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("WhiteListReasonType_RestoreHanlder: WhiteListReasonType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("WhiteListReasonType_RestoreHandler: WhiteListReasonType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.WhiteListReasonType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_ReadHanlder: Organization_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_ReadHandler: Organization_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_CreateHanlder: Organization_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_CreateHandler: Organization_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_UpdateHanlder: Organization_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_UpdateHandler: Organization_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_SaveHanlder: Organization_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_SaveHandler: Organization_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_DeleteHanlder: Organization_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_DeleteHandler: Organization_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_RestoreHanlder: Organization_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_RestoreHandler: Organization_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_FindByInnKpp":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_FindByInnKppHanlder: Organization_FindByInnKpp subject parsing failed: %v", err)
			break
		}
		var req RequestInnKpp
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_FindByInnKppHandler: Organization_FindByInnKpp request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_FindByInnKpp(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Organization_FindByExtId":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Organization_FindByExtIdHanlder: Organization_FindByExtId subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Organization_FindByExtIdHandler: Organization_FindByExtId request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Organization_FindByExtId(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_ReadHanlder: File_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_ReadHandler: File_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_CreateHanlder: File_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_CreateHandler: File_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_UpdateHanlder: File_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_UpdateHandler: File_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_SaveHanlder: File_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_SaveHandler: File_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_DeleteHanlder: File_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_DeleteHandler: File_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_RestoreHanlder: File_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_RestoreHandler: File_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_FindByFileID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_FindByFileIDHanlder: File_FindByFileID subject parsing failed: %v", err)
			break
		}
		var req RequestString
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_FindByFileIDHandler: File_FindByFileID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_FindByFileID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "File_FindByFullName":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("File_FindByFullNameHanlder: File_FindByFullName subject parsing failed: %v", err)
			break
		}
		var req RequestString
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("File_FindByFullNameHandler: File_FindByFullName request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.File_FindByFullName(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_ReadHanlder: OrganizationCasebook_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_ReadHandler: OrganizationCasebook_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_CreateHanlder: OrganizationCasebook_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_CreateHandler: OrganizationCasebook_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_UpdateHanlder: OrganizationCasebook_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_UpdateHandler: OrganizationCasebook_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_SaveHanlder: OrganizationCasebook_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_SaveHandler: OrganizationCasebook_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_DeleteHanlder: OrganizationCasebook_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_DeleteHandler: OrganizationCasebook_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_RestoreHanlder: OrganizationCasebook_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_RestoreHandler: OrganizationCasebook_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_FindByInnKpp":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_FindByInnKppHanlder: OrganizationCasebook_FindByInnKpp subject parsing failed: %v", err)
			break
		}
		var req RequestInnKpp
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_FindByInnKppHandler: OrganizationCasebook_FindByInnKpp request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_FindByInnKpp(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_FindByInn":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_FindByInnHanlder: OrganizationCasebook_FindByInn subject parsing failed: %v", err)
			break
		}
		var req RequestString
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_FindByInnHandler: OrganizationCasebook_FindByInn request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_FindByInn(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "OrganizationCasebook_FindByOrganizationId":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("OrganizationCasebook_FindByOrganizationIdHanlder: OrganizationCasebook_FindByOrganizationId subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("OrganizationCasebook_FindByOrganizationIdHandler: OrganizationCasebook_FindByOrganizationId request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.OrganizationCasebook_FindByOrganizationId(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Connection_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Connection_ReadHanlder: Connection_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Connection_ReadHandler: Connection_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Connection_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Connection_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Connection_CreateHanlder: Connection_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Connection_CreateHandler: Connection_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Connection_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Connection_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Connection_UpdateHanlder: Connection_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Connection_UpdateHandler: Connection_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Connection_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Connection_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Connection_SaveHanlder: Connection_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Connection_SaveHandler: Connection_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Connection_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_ReadHanlder: Employee_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_ReadHandler: Employee_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_CreateHanlder: Employee_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_CreateHandler: Employee_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_UpdateHanlder: Employee_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_UpdateHandler: Employee_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_SaveHanlder: Employee_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_SaveHandler: Employee_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_DeleteHanlder: Employee_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_DeleteHandler: Employee_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_RestoreHanlder: Employee_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_RestoreHandler: Employee_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_FindByExtId":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_FindByExtIdHanlder: Employee_FindByExtId subject parsing failed: %v", err)
			break
		}
		var req RequestExtId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_FindByExtIdHandler: Employee_FindByExtId request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_FindByExtId(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_FindByLogin":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_FindByLoginHanlder: Employee_FindByLogin subject parsing failed: %v", err)
			break
		}
		var req RequestString
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_FindByLoginHandler: Employee_FindByLogin request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_FindByLogin(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_FindByEMail":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_FindByEMailHanlder: Employee_FindByEMail subject parsing failed: %v", err)
			break
		}
		var req RequestString
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_FindByEMailHandler: Employee_FindByEMail request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_FindByEMail(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Employee_FindByFIO":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Employee_FindByFIOHanlder: Employee_FindByFIO subject parsing failed: %v", err)
			break
		}
		var req RequestString3
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Employee_FindByFIOHandler: Employee_FindByFIO request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Employee_FindByFIO(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_ReadHanlder: LawsuitStatusState_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_ReadHandler: LawsuitStatusState_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_CreateHanlder: LawsuitStatusState_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_CreateHandler: LawsuitStatusState_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_UpdateHanlder: LawsuitStatusState_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_UpdateHandler: LawsuitStatusState_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_SaveHanlder: LawsuitStatusState_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_SaveHandler: LawsuitStatusState_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_DeleteHanlder: LawsuitStatusState_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_DeleteHandler: LawsuitStatusState_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_RestoreHanlder: LawsuitStatusState_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_RestoreHandler: LawsuitStatusState_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_FillFromLawsuit":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_FillFromLawsuitHanlder: LawsuitStatusState_FillFromLawsuit subject parsing failed: %v", err)
			break
		}
		var req RequestIdId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_FillFromLawsuitHandler: LawsuitStatusState_FillFromLawsuit request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_FillFromLawsuit(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusState_FindDebtSum":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusState_FindDebtSumHanlder: LawsuitStatusState_FindDebtSum subject parsing failed: %v", err)
			break
		}
		var req RequestIdId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusState_FindDebtSumHandler: LawsuitStatusState_FindDebtSum request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusState_FindDebtSum(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusType_ReadHanlder: LawsuitStatusType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusType_ReadHandler: LawsuitStatusType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusType_CreateHanlder: LawsuitStatusType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusType_CreateHandler: LawsuitStatusType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusType_UpdateHanlder: LawsuitStatusType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusType_UpdateHandler: LawsuitStatusType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusType_SaveHanlder: LawsuitStatusType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusType_SaveHandler: LawsuitStatusType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusType_DeleteHanlder: LawsuitStatusType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusType_DeleteHandler: LawsuitStatusType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "LawsuitStatusType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("LawsuitStatusType_RestoreHanlder: LawsuitStatusType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("LawsuitStatusType_RestoreHandler: LawsuitStatusType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.LawsuitStatusType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Lawsuit_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Lawsuit_ReadHanlder: Lawsuit_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Lawsuit_ReadHandler: Lawsuit_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Lawsuit_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Lawsuit_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Lawsuit_CreateHanlder: Lawsuit_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Lawsuit_CreateHandler: Lawsuit_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Lawsuit_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Lawsuit_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Lawsuit_UpdateHanlder: Lawsuit_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Lawsuit_UpdateHandler: Lawsuit_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Lawsuit_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Lawsuit_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Lawsuit_SaveHanlder: Lawsuit_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Lawsuit_SaveHandler: Lawsuit_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Lawsuit_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Lawsuit_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Lawsuit_DeleteHanlder: Lawsuit_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Lawsuit_DeleteHandler: Lawsuit_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Lawsuit_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Lawsuit_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Lawsuit_RestoreHanlder: Lawsuit_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Lawsuit_RestoreHandler: Lawsuit_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Lawsuit_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageAttachement_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageAttachement_ReadHanlder: MessageAttachement_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageAttachement_ReadHandler: MessageAttachement_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageAttachement_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageAttachement_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageAttachement_CreateHanlder: MessageAttachement_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageAttachement_CreateHandler: MessageAttachement_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageAttachement_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageAttachement_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageAttachement_UpdateHanlder: MessageAttachement_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageAttachement_UpdateHandler: MessageAttachement_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageAttachement_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageAttachement_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageAttachement_SaveHanlder: MessageAttachement_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageAttachement_SaveHandler: MessageAttachement_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageAttachement_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageAttachement_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageAttachement_DeleteHanlder: MessageAttachement_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageAttachement_DeleteHandler: MessageAttachement_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageAttachement_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageAttachement_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageAttachement_RestoreHanlder: MessageAttachement_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageAttachement_RestoreHandler: MessageAttachement_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageAttachement_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatuse_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatuse_ReadHanlder: MessageSendStatuse_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatuse_ReadHandler: MessageSendStatuse_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatuse_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatuse_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatuse_CreateHanlder: MessageSendStatuse_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatuse_CreateHandler: MessageSendStatuse_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatuse_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatuse_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatuse_UpdateHanlder: MessageSendStatuse_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatuse_UpdateHandler: MessageSendStatuse_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatuse_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatuse_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatuse_SaveHanlder: MessageSendStatuse_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatuse_SaveHandler: MessageSendStatuse_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatuse_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatuse_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatuse_DeleteHanlder: MessageSendStatuse_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatuse_DeleteHandler: MessageSendStatuse_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatuse_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageSendStatuse_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageSendStatuse_RestoreHanlder: MessageSendStatuse_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageSendStatuse_RestoreHandler: MessageSendStatuse_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageSendStatuse_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageType_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageType_ReadHanlder: MessageType_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageType_ReadHandler: MessageType_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageType_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageType_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageType_CreateHanlder: MessageType_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageType_CreateHandler: MessageType_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageType_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageType_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageType_UpdateHanlder: MessageType_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageType_UpdateHandler: MessageType_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageType_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageType_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageType_SaveHanlder: MessageType_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageType_SaveHandler: MessageType_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageType_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageType_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageType_DeleteHanlder: MessageType_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageType_DeleteHandler: MessageType_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageType_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "MessageType_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("MessageType_RestoreHanlder: MessageType_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("MessageType_RestoreHandler: MessageType_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.MessageType_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Message_Read":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Message_ReadHanlder: Message_Read subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Message_ReadHandler: Message_Read request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Message_Read(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Message_Create":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Message_CreateHanlder: Message_Create subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Message_CreateHandler: Message_Create request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Message_Create(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Message_Update":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Message_UpdateHanlder: Message_Update subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Message_UpdateHandler: Message_Update request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Message_Update(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Message_Save":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Message_SaveHanlder: Message_Save subject parsing failed: %v", err)
			break
		}
		var req RequestModel
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Message_SaveHandler: Message_Save request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Message_Save(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Message_Delete":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Message_DeleteHanlder: Message_Delete subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Message_DeleteHandler: Message_Delete request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Message_Delete(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Message_Restore":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Message_RestoreHanlder: Message_Restore subject parsing failed: %v", err)
			break
		}
		var req RequestId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Message_RestoreHandler: Message_Restore request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Message_Restore(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "Message_FindBy_LawsuitID_MessageTypeID":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("Message_FindBy_LawsuitID_MessageTypeIDHanlder: Message_FindBy_LawsuitID_MessageTypeID subject parsing failed: %v", err)
			break
		}
		var req RequestIdId
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("Message_FindBy_LawsuitID_MessageTypeIDHandler: Message_FindBy_LawsuitID_MessageTypeID request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.Message_FindBy_LawsuitID_MessageTypeID(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("Sync_serviceHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type:    nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("Sync_serviceHandler: Sync_service handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type Sync_serviceClient struct {
	nc       nrpc.NatsConn
	Subject  string
	Encoding string
	Timeout  time.Duration
}

func NewSync_serviceClient(nc nrpc.NatsConn) *Sync_serviceClient {
	return &Sync_serviceClient{
		nc:       nc,
		Subject:  "Sync_service",
		Encoding: "protobuf",
		Timeout:  5 * time.Second,
	}
}

func (c *Sync_serviceClient) AccountingArea_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "AccountingArea_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccountingArea_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "AccountingArea_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccountingArea_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "AccountingArea_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccountingArea_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "AccountingArea_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccountingArea_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "AccountingArea_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccountingArea_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "AccountingArea_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccountingArea_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "AccountingArea_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccrualType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "AccrualType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccrualType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "AccrualType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccrualType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "AccrualType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccrualType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "AccrualType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccrualType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "AccrualType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) AccrualType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "AccrualType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Balance_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Balance_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Balance_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Balance_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Balance_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Balance_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Balance_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Balance_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Balance_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Balance_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Balance_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Balance_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Balance_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Balance_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BankAccountOrganization_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "BankAccountOrganization_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BankAccountOrganization_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "BankAccountOrganization_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BankAccountOrganization_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "BankAccountOrganization_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BankAccountOrganization_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "BankAccountOrganization_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BankAccountOrganization_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "BankAccountOrganization_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BankAccountOrganization_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "BankAccountOrganization_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BankAccountOrganization_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "BankAccountOrganization_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Bank_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Bank_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Bank_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Bank_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Bank_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Bank_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Bank_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Bank_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Bank_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Bank_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Bank_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Bank_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Bank_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Bank_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BillKindType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "BillKindType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BillKindType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "BillKindType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BillKindType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "BillKindType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BillKindType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "BillKindType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BillKindType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "BillKindType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) BillKindType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "BillKindType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Branch_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Branch_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Branch_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Branch_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Branch_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Branch_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Branch_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Branch_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Branch_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Branch_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Branch_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Branch_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Calendar_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Calendar_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Calendar_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Calendar_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Calendar_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Calendar_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Calendar_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Calendar_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Calendar_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Calendar_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Calendar_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Calendar_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChangeItem_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ChangeItem_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChangeItem_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ChangeItem_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChangeItem_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ChangeItem_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChangeItem_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ChangeItem_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChangeItem_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ChangeItem_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChangeItem_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ChangeItem_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChannelType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ChannelType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChannelType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ChannelType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChannelType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ChannelType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChannelType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ChannelType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChannelType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ChannelType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ChannelType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ChannelType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ClaimType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ClaimType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ClaimType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ClaimType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ClaimType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ClaimType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ClaimType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ClaimType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ClaimType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ClaimType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ClaimType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ClaimType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Comment_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Comment_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Comment_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Comment_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Comment_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Comment_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Comment_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Comment_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Comment_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Comment_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Comment_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Comment_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) CompletedMonth_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "CompletedMonth_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) CompletedMonth_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "CompletedMonth_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) CompletedMonth_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "CompletedMonth_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) CompletedMonth_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "CompletedMonth_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) CompletedMonth_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "CompletedMonth_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) CompletedMonth_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "CompletedMonth_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) CompletedMonth_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "CompletedMonth_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractBlackItem_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractBlackItem_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractBlackItem_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractBlackItem_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractBlackItem_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractBlackItem_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractBlackItem_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractBlackItem_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractBlackItem_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractBlackItem_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractBlackItem_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractBlackItem_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractCategoryType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractCategoryType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractCategoryType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractCategoryType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractCategoryType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractCategoryType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractCategoryType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractCategoryType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractCategoryType_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "ContractCategoryType_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractCategoryType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractCategoryType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractCategoryType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractCategoryType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractWhiteItem_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractWhiteItem_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractWhiteItem_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractWhiteItem_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractWhiteItem_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractWhiteItem_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractWhiteItem_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ContractWhiteItem_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractWhiteItem_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractWhiteItem_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ContractWhiteItem_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ContractWhiteItem_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Contract_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Contract_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Contract_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Contract_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Contract_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Contract_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Contract_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Contract_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Contract_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Contract_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Contract_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Contract_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Contract_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Contract_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Court_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Court_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Court_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Court_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Court_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Court_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Court_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Court_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Court_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Court_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Court_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Court_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DayType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DayType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DayType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DayType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DayType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DayType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DayType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DayType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DayType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DayType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DayType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DayType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DebtType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DebtType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DebtType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DebtType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DebtType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DebtType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DebtType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DebtType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DebtType_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "DebtType_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DebtType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DebtType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DebtType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DebtType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DirectionType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DirectionType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DirectionType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DirectionType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DirectionType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DirectionType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DirectionType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DirectionType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DirectionType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DirectionType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DirectionType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DirectionType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLinkType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentLinkType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLinkType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentLinkType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLinkType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentLinkType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLinkType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentLinkType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLinkType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentLinkType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLinkType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentLinkType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLink_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentLink_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLink_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentLink_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLink_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentLink_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLink_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentLink_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLink_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "DocumentLink_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLink_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentLink_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentLink_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentLink_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "DocumentType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentType_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "DocumentType_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) DocumentType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "DocumentType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Document_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Document_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Document_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Document_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Document_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Document_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Document_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Document_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Document_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Document_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Document_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Document_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Document_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Document_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Employee_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) EventType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "EventType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) EventType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "EventType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) EventType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "EventType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) EventType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "EventType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) EventType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "EventType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) EventType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "EventType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Event_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Event_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Event_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Event_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Event_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Event_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Event_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Event_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Event_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Event_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Event_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Event_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Facsimile_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Facsimile_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Facsimile_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Facsimile_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Facsimile_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Facsimile_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Facsimile_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Facsimile_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Facsimile_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Facsimile_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Facsimile_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Facsimile_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileChange_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "FileChange_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileChange_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileChange_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileChange_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileChange_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileChange_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileChange_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileTemplate_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "FileTemplate_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileTemplate_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileTemplate_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileTemplate_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileTemplate_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileTemplate_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileTemplate_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileTemplate_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "FileTemplate_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileTemplate_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "FileTemplate_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "FileType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "FileType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "FileType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) FileType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "FileType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) GenderType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "GenderType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) GenderType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "GenderType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) GenderType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "GenderType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) GenderType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "GenderType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) GenderType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "GenderType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) GenderType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "GenderType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) HashtagLink_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "HashtagLink_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) HashtagLink_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "HashtagLink_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) HashtagLink_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "HashtagLink_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) HashtagLink_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "HashtagLink_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) HashtagLink_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "HashtagLink_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) HashtagLink_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "HashtagLink_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Hashtag_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Hashtag_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Hashtag_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Hashtag_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Hashtag_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Hashtag_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Hashtag_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Hashtag_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Hashtag_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Hashtag_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Hashtag_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Hashtag_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Individual_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Individual_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Individual_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Individual_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Individual_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Individual_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Individual_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Individual_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Individual_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Individual_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Individual_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Individual_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Individual_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Individual_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) InvoiceDebtTypeStat_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "InvoiceDebtTypeStat_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) InvoiceDebtTypeStat_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "InvoiceDebtTypeStat_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) InvoiceDebtTypeStat_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "InvoiceDebtTypeStat_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) InvoiceDebtTypeStat_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "InvoiceDebtTypeStat_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) InvoiceDebtTypeStat_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "InvoiceDebtTypeStat_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) InvoiceDebtTypeStat_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "InvoiceDebtTypeStat_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoiceCorrection_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoiceCorrection_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoiceCorrection_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoiceCorrection_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoiceCorrection_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoiceCorrection_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoiceCorrection_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoiceCorrection_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoiceCorrection_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoiceCorrection_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoiceCorrection_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoiceCorrection_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoice_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoice_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoice_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoice_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoice_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoice_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoice_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoice_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoice_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoice_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitInvoice_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitInvoice_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPaymentCorrection_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPaymentCorrection_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPaymentCorrection_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPaymentCorrection_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPaymentCorrection_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPaymentCorrection_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPaymentCorrection_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPaymentCorrection_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPaymentCorrection_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPaymentCorrection_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPaymentCorrection_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPaymentCorrection_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPayment_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPayment_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPayment_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPayment_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPayment_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPayment_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPayment_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPayment_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPayment_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPayment_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitPayment_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitPayment_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitReasonType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitReasonType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitReasonType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitReasonType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitReasonType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitReasonType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitReasonType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitReasonType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitReasonType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitReasonType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitReasonType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitReasonType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStageType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStageType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStageType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStageType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStageType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStageType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStageType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStageType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStageType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStageType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStageType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStageType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Lawsuit_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Lawsuit_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LegalType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LegalType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LegalType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LegalType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LegalType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LegalType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LegalType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LegalType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LegalType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LegalType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LegalType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LegalType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatus_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatus_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatus_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatus_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatus_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatus_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatus_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatus_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatus_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatus_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatus_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatus_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCategoryType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCategoryType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCategoryType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCategoryType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCategoryType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCategoryType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCategoryType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCategoryType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCategoryType_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCategoryType_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCategoryType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCategoryType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCategoryType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCategoryType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationStateType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationStateType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationStateType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationStateType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationStateType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationStateType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationStateType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationStateType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationStateType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationStateType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationStateType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationStateType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Organization_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentDay_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PaymentDay_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentDay_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PaymentDay_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentDay_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PaymentDay_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentDay_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PaymentDay_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentDay_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "PaymentDay_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentDay_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PaymentDay_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentDay_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PaymentDay_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentSchedule_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PaymentSchedule_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentSchedule_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PaymentSchedule_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentSchedule_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PaymentSchedule_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentSchedule_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PaymentSchedule_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentSchedule_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "PaymentSchedule_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentSchedule_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PaymentSchedule_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PaymentSchedule_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PaymentSchedule_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PenaltyCalculationItem_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PenaltyCalculationItem_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PenaltyCalculationItem_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PenaltyCalculationItem_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PenaltyCalculationItem_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PenaltyCalculationItem_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PenaltyCalculationItem_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "PenaltyCalculationItem_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PenaltyCalculationItem_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "PenaltyCalculationItem_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PenaltyCalculationItem_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PenaltyCalculationItem_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) PenaltyCalculationItem_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "PenaltyCalculationItem_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceProvider_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ServiceProvider_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceProvider_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ServiceProvider_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceProvider_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ServiceProvider_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceProvider_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ServiceProvider_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceProvider_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "ServiceProvider_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceProvider_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ServiceProvider_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceProvider_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ServiceProvider_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ServiceType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ServiceType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ServiceType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "ServiceType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceType_FindByExtID(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "ServiceType_FindByExtID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ServiceType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) ServiceType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "ServiceType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) StateDuty_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "StateDuty_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) StateDuty_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "StateDuty_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) StateDuty_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "StateDuty_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) StateDuty_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "StateDuty_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) StateDuty_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "StateDuty_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) StateDuty_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "StateDuty_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) TableName_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "TableName_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) TableName_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "TableName_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) TableName_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "TableName_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) TableName_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "TableName_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) TableName_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "TableName_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) TableName_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "TableName_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) UserRole_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "UserRole_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) UserRole_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "UserRole_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) UserRole_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "UserRole_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) UserRole_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "UserRole_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) UserRole_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "UserRole_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) UserRole_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "UserRole_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) WhiteListReasonType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "WhiteListReasonType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) WhiteListReasonType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "WhiteListReasonType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) WhiteListReasonType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "WhiteListReasonType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) WhiteListReasonType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "WhiteListReasonType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) WhiteListReasonType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "WhiteListReasonType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) WhiteListReasonType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "WhiteListReasonType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Organization_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Organization_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Organization_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Organization_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Organization_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Organization_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_FindByInnKpp(req *RequestInnKpp) (*Response, error) {

	subject := c.Subject + "." + "Organization_FindByInnKpp"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Organization_FindByExtId(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Organization_FindByExtId"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "File_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "File_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "File_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "File_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "File_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "File_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_FindByFileID(req *RequestString) (*Response, error) {

	subject := c.Subject + "." + "File_FindByFileID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) File_FindByFullName(req *RequestString) (*Response, error) {

	subject := c.Subject + "." + "File_FindByFullName"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_FindByInnKpp(req *RequestInnKpp) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_FindByInnKpp"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_FindByInn(req *RequestString) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_FindByInn"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) OrganizationCasebook_FindByOrganizationId(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "OrganizationCasebook_FindByOrganizationId"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Connection_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Connection_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Connection_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Connection_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Connection_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Connection_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Connection_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Connection_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Employee_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Employee_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Employee_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Employee_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Employee_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Employee_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_FindByExtId(req *RequestExtId) (*Response, error) {

	subject := c.Subject + "." + "Employee_FindByExtId"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_FindByLogin(req *RequestString) (*Response, error) {

	subject := c.Subject + "." + "Employee_FindByLogin"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_FindByEMail(req *RequestString) (*Response, error) {

	subject := c.Subject + "." + "Employee_FindByEMail"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Employee_FindByFIO(req *RequestString3) (*Response, error) {

	subject := c.Subject + "." + "Employee_FindByFIO"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusState_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusState_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusState_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusState_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusState_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusState_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_FillFromLawsuit(req *RequestIdId) (*ResponseEmpty, error) {

	subject := c.Subject + "." + "LawsuitStatusState_FillFromLawsuit"

	// call
	var resp = ResponseEmpty{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusState_FindDebtSum(req *RequestIdId) (*ResponseFloat64, error) {

	subject := c.Subject + "." + "LawsuitStatusState_FindDebtSum"

	// call
	var resp = ResponseFloat64{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) LawsuitStatusType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "LawsuitStatusType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Lawsuit_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Lawsuit_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Lawsuit_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Lawsuit_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Lawsuit_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Lawsuit_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Lawsuit_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Lawsuit_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Lawsuit_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Lawsuit_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Lawsuit_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Lawsuit_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageAttachement_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageAttachement_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageAttachement_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageAttachement_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageAttachement_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageAttachement_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageAttachement_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageAttachement_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageAttachement_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageAttachement_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageAttachement_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageAttachement_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatuse_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatuse_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatuse_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatuse_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatuse_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatuse_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatuse_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatuse_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatuse_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatuse_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageSendStatuse_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageSendStatuse_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageType_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageType_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageType_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageType_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageType_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageType_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageType_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "MessageType_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageType_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageType_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) MessageType_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "MessageType_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Message_Read(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Message_Read"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Message_Create(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Message_Create"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Message_Update(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Message_Update"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Message_Save(req *RequestModel) (*Response, error) {

	subject := c.Subject + "." + "Message_Save"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Message_Delete(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Message_Delete"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Message_Restore(req *RequestId) (*Response, error) {

	subject := c.Subject + "." + "Message_Restore"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *Sync_serviceClient) Message_FindBy_LawsuitID_MessageTypeID(req *RequestIdId) (*Response, error) {

	subject := c.Subject + "." + "Message_FindBy_LawsuitID_MessageTypeID"

	// call
	var resp = Response{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

type Client struct {
	nc              nrpc.NatsConn
	defaultEncoding string
	defaultTimeout  time.Duration
	Sync_service    *Sync_serviceClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc:              nc,
		defaultEncoding: "protobuf",
		defaultTimeout:  5 * time.Second,
	}
	c.Sync_service = NewSync_serviceClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.Sync_service != nil {
		c.Sync_service.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.Sync_service != nil {
		c.Sync_service.Timeout = t
	}
}
